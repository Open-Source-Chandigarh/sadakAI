instruction,output
What is Intro to internet?,"The Internet is a global network of computers connected to each other which communicate through a standardized set of protocols. Context: https://cs.fyi/guide/how-does-internet-work, https://www.vox.com/2014/6/16/18076282/the-internet, https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm, https://www.youtube.com/watch?v=x3c1ih2NJEg, https://www.youtube.com/watch?v=7_LPdttKXPc, https://www.youtube.com/watch?v=zN8YNNHcaZc"
What is Intro to HTTP?,"HTTP is the TCP/IP based application layer communication protocol which standardizes how the client and server communicate with each other. It defines how the content is requested and transmitted across the internet. Context: https://cs.fyi/guide/http-in-depth, https://www.cloudflare.com/en-gb/learning/ddos/glossary/hypertext-transfer-protocol-http/, https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview, https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/, https://www.youtube.com/watch?v=j9QmMEWmcfo, https://www.youtube.com/watch?v=iYM2zFP3Zn0, https://www.youtube.com/watch?v=a-sBfyiXysI, https://www.youtube.com/watch?v=2JYT5f2isg4"
What is Intro to Domain Name?,"A domain name is a unique, easy-to-remember address used to access websites, such as ‘google.com’, and ‘facebook.com’. Users can connect to websites using domain names thanks to the DNS system. Context: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_domain_name, https://www.cloudflare.com/en-gb/learning/dns/glossary/what-is-a-domain-name/, https://www.youtube.com/watch?v=Y4cRx19nhJk"
What is Intro to Hosting?,"Web hosting is an online service that allows you to publish your website files onto the internet. So, anyone who has access to the internet has access to your website. Context: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/Pages_sites_servers_and_search_engines, https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_web_server, https://www.youtube.com/watch?v=htbY9-yggB0, https://www.youtube.com/watch?v=AXVZYzw8geg, https://www.youtube.com/watch?v=Kx_1NYYJS7Q"
What is Intro to DNS and How it works??,"The Domain Name System (DNS) is the phonebook of the Internet. Humans access information online through domain names, like nytimes.com or espn.com. Web browsers interact through Internet Protocol (IP) addresses. DNS translates domain names to IP addresses so browsers can load Internet resources. Context: https://www.cloudflare.com/en-gb/learning/dns/what-is-dns/, https://howdns.works/, https://developer.mozilla.org/en-US/docs/Glossary/DNS, https://www.youtube.com/watch?v=Wj0od2ag5sk, https://www.youtube.com/watch?v=7lxgpKh_fRY, https://www.youtube.com/watch?v=zEmUuNFBgN8&list=PLTk5ZYSbd9MhMmOiPhfRJNW7bhxHo4q-K, https://app.daily.dev/tags/dns?ref=roadmapsh"
What is Intro to Browsers and how they work?,"A web browser is a software application that enables a user to access and display web pages or other online content through its graphical user interface. Context: https://web.dev/articles/howbrowserswork, https://www.browserstack.com/guide/browser-rendering-engine, https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work, https://app.daily.dev/tags/browsers?ref=roadmapsh"
What is Learning a language?,"Even if you’re a beginner the least you would have known is that Web Development is majorly classified into two facets: Frontend Development and Backend Development. And obviously, they both have their respective set of tools and technologies. For instance, when we talk about Frontend Development, there always comes 3 names first and foremost – HTML, CSS, and JavaScript. In the same way, when it comes to Backend Web Development – we primarily require a backend (or you can say server-side) programming language to make the website function along with various other tools & technologies such as databases, frameworks, web servers, etc. Pick a language from the given list and make sure to learn its quirks, core details about its runtime e.g. concurrency, memory model etc. Context: https://www.google.com/search?q=learn%20a%20language%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=learn+a+language+for+backend+developer"
What is JavaScript?,"JavaScript allows you to add interactivity to your pages. Common examples that you may have seen on the websites are sliders, click interactions, popups and so on. Context: https://javascript.info/, https://javascript30.com/, https://www.youtube.com/watch?v=hdI2bqOjy3c&t=2s, https://app.daily.dev/tags/javascript?ref=roadmapsh"
What is Go?,"Go is an open source programming language supported by Google. Go can be used to write cloud services, CLI tools, used for API development, and much more. Context: https://go.dev/tour/welcome/1, https://go.dev/doc/, https://gobyexample.com/, https://www.w3schools.com/go/, https://thenewstack.io/make-a-restful-json-api-go/, https://thenewstack.io/go-the-programming-language-of-the-cloud/, https://www.youtube.com/playlist?list=PLoILbKo9rG3skRCj37Kn5Zj803hhiuRK6, https://app.daily.dev/tags/golang?ref=roadmapsh"
What is Python?,"Python is a well known programming language which is both a strongly typed and a dynamically typed language. Being an interpreted language, code is executed as soon as it is written and the Python syntax allows for writing code in functional, procedural or object-oriented programmatic ways. Context: https://www.python.org/, https://www.python.org/about/gettingstarted/, https://automatetheboringstuff.com/, https://pythonprinciples.com/, https://www.w3schools.com/python/, https://ehmatthes.github.io/pcc/, https://thenewstack.io/an-introduction-to-python-for-non-programmers/, https://thenewstack.io/getting-started-with-python-and-influxdb/, https://app.daily.dev/tags/python?ref=roadmapsh, https://app.daily.dev/onboarding"
What is Ruby?,"Ruby is a high-level, interpreted programming language that blends Perl, Smalltalk, Eiffel, Ada, and Lisp. Ruby focuses on simplicity and productivity along with a syntax that reads and writes naturally. Ruby supports procedural, object-oriented and functional programming and is dynamically typed. Context: https://www.ruby-lang.org/en/, https://www.ruby-lang.org/en/documentation/quickstart/, https://thenewstack.io/ruby-a-programmers-best-friend/, https://www.youtube.com/playlist?list=PL_EzhIKp343lBMH4UuklrMRL_WkilGoXe, https://app.daily.dev/tags/ruby?ref=roadmapsh"
What is Java?,"Java is general-purpose language, primarily used for Internet-based applications. It was created in 1995 by James Gosling at Sun Microsystems and is one of the most popular options for backend developers. Context: https://www.java.com/en/, https://www.w3schools.com/java/, https://www.youtube.com/watch?v=eIrMbAQSU34, https://www.youtube.com/watch?v=xk4_1vDrzzo, https://app.daily.dev/tags/java?ref=roadmapsh"
What is C#?,"C# (pronounced “C sharp”) is a general purpose programming language made by Microsoft. It is used to perform different tasks and can be used to create web apps, games, mobile apps, etc. Context: https://learn.microsoft.com/en-us/training/paths/get-started-c-sharp-part-1/?WT.mc_id=dotnet-35129-website, https://www.w3schools.com/cs/index.php, https://learn.microsoft.com/en-us/shows/csharp-for-beginners/?WT.mc_id=Educationalcsharp-c9-scottha, https://www.youtube.com/watch?v=gfkTfcpWqAY&list=PLTjRvDozrdlz3_FPXwb6lX_HoGXa09Yef, https://app.daily.dev/tags/c###########################?ref=roadmapsh"
What is PHP?,"PHP is a general purpose scripting language often used for making dynamic and interactive Web pages. It was originally created by Danish-Canadian programmer Rasmus Lerdorf in 1994. The PHP reference implementation is now produced by The PHP Group and supported by PHP Foundation. PHP supports procedural and object-oriented styles of programming with some elements of functional programming as well. Context: https://www.php.net/, https://www.w3schools.com/php/, https://phptherightway.com/, https://www.youtube.com/watch?v=U2lQWR6uIuo&list=PL3VM-unCzF8ipG50KDjnzhugceoSG3RTC, https://www.youtube.com/watch?v=2eebptXfEvw, https://www.youtube.com/watch?v=sVbEyFZKgqk&list=PLr3d3QYzkw2xabQRUpcZ_IBk9W50M9pe-, https://app.daily.dev/tags/php?ref=roadmapsh"
What is Rust?,"Rust is a modern systems programming language focusing on safety, speed, and concurrency. It accomplishes these goals by being memory safe without using garbage collection. Context: https://doc.rust-lang.org/book/, https://doc.rust-lang.org/stable/rust-by-example/index.html, https://thenewstack.io/rust-by-the-numbers-the-rust-programming-language-in-2021/, https://app.daily.dev/tags/rust?ref=roadmapsh"
What is Intro to Version Control Systems?,"Version control/source control systems allow developers to track and control changes to code over time. These services often include the ability to make atomic revisions to code, branch/fork off of specific points, and to compare versions of code. They are useful in determining the who, what, when, and why code changes were made. Context: https://www.atlassian.com/git/tutorials/what-is-version-control, https://git-scm.com/"
What is Git?,"Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Context: https://learn.microsoft.com/en-us/training/modules/intro-to-git/, https://www.atlassian.com/git, https://cs.fyi/guide/git-cheatsheet, https://learngitbranching.js.org/, https://www.w3schools.com/git/, https://www.youtube.com/watch?v=SWYqp7iY_Tc, https://app.daily.dev/tags/git?ref=roadmapsh"
What is Intro to Repo Hosting Services?,"When working on a team, you often need a remote place to put your code so others can access it, create their own branches, and create or review pull requests. These services often include issue tracking, code review, and continuous integration features. A few popular choices are GitHub, GitLab, BitBucket, and AWS CodeCommit. Context: https://github.com/features/, https://about.gitlab.com/, https://bitbucket.org/product/guides/getting-started/overview#a-brief-overview-of-bitbucket, https://blockandcapital.com/en/choose-code-repository/"
What is GitHub?,"GitHub is a provider of Internet hosting for software development and version control using Git. It offers the distributed version control and source code management functionality of Git, plus its own features. Context: https://github.com/, https://docs.github.com/en/get-started/start-your-journey, https://ooloo.io/project/github-flow, https://learngitbranching.js.org/?locale=en_us, https://www.youtube.com/watch?v=w3jLJU7DT5E, https://www.youtube.com/watch?v=wpISo9TNjfU, https://www.youtube.com/watch?v=RGOj5yH7evk, https://www.youtube.com/watch?v=eulnSXkhE7I, https://app.daily.dev/tags/github?ref=roadmapsh"
What is GitLab?,"GitLab is a provider of internet hosting for software development and version control using Git. It offers the distributed version control and source code management functionality of Git, plus its own features. Context: https://about.gitlab.com/, https://docs.gitlab.com/, https://app.daily.dev/tags/gitlab?ref=roadmapsh"
What is Bitbucket?,"Bitbucket is a Git based hosting and source code repository service that is Atlassian’s alternative to other products like GitHub, GitLab etc.Bitbucket offers hosting options via Bitbucket Cloud (Atlassian’s servers), Bitbucket Server (customer’s on-premise) or Bitbucket Data Centre (number of servers in customers on-premise or cloud environment Context: https://bitbucket.org/product/, https://bitbucket.org/product/guides/basics/bitbucket-interface#your-work, https://bitbucket.org/product/guides/getting-started/overview#a-brief-overview-of-bitbucket, https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud, https://www.youtube.com/watch?v=M44nEyd_5To, https://www.youtube.com/watch?v=i5T-DB8tb4A, https://app.daily.dev/tags/bitbucket?ref=roadmapsh"
What is Intro to Relational Databases?,"A relational database is a type of database that stores and provides access to data points that are related to one another. Relational databases store data in a series of tables. Interconnections between the tables are specified as foreign keys. A foreign key is a unique reference from one row in a relational table to another row in a table, which can be the same table but is most commonly a different table. Context: https://www.edx.org/learn/relational-databases/stanford-university-databases-relational-databases-and-sql, https://www.ibm.com/topics/relational-databases, https://learnsql.com/blog/codd-article-databases/, https://www.udacity.com/course/intro-to-relational-databases--ud197, https://www.youtube.com/watch?v=OqjJjpjDRLc, https://app.daily.dev/tags/backend?ref=roadmapsh"
What is MySQL?,"MySQL is an incredibly popular open source relational database management system (RDBMS). MySQL can be used as a stand-alone client or in conjunction with other services to provide database connectivity. The M in LAMP stack stands for MySQL; that alone should provide an idea of its prevalence. Context: https://www.mysql.com/, https://www.w3schools.com/mySQl/default.asp, https://planetscale.com/learn/courses/mysql-for-developers, https://www.mysqltutorial.org/, https://www.youtube.com/watch?v=7S_tz1z_5bA, https://app.daily.dev/tags/mysql?ref=roadmapsh"
What is MariaDB?,"MariaDB server is a community developed fork of MySQL server. Started by core members of the original MySQL team, MariaDB actively works with outside developers to deliver the most featureful, stable, and sanely licensed open SQL server in the industry. MariaDB was created with the intention of being a more versatile, drop-in replacement version of MySQL Context: https://mariadb.org/, https://www.guru99.com/mariadb-vs-mysql.html, https://www.w3schools.blog/mariadb-tutorial, https://www.youtube.com/watch?v=_AMj02sANpI, https://app.daily.dev/tags/infrastructure?ref=roadmapsh"
What is MS SQL?,"MS SQL (or Microsoft SQL Server) is the Microsoft developed relational database management system (RDBMS). MS SQL uses the T-SQL (Transact-SQL) query language to interact with the relational databases. There are many different versions and editions available of MS SQL Context: https://www.microsoft.com/en-ca/sql-server/, https://learn.microsoft.com/en-us/sql/sql-server/tutorials-for-sql-server-2016?view=sql-server-ver15, https://www.youtube.com/watch?v=-EPMOaV7h_Q"
What is Oracle?,"Oracle Database Server or sometimes called Oracle RDBMS or even simply Oracle is a world leading relational database management system produced by Oracle Corporation. Context: https://www.oracle.com/database/, https://docs.oracle.com/en/database/index.html, https://www.youtube.com/watch?v=ObbNGhcxXJA, https://app.daily.dev/tags/oracle?ref=roadmapsh"
What is PostgreSQL?,"PostgreSQL, also known as Postgres, is a free and open-source relational database management system emphasizing extensibility and SQL compliance. Context: https://www.postgresql.org/, https://www.postgresqltutorial.com/, https://www.youtube.com/watch?v=qw--VYLpxG4, https://www.youtube.com/watch?v=eMIxuk0nOkU, https://app.daily.dev/tags/postgresql?ref=roadmapsh"
What is REST?,"REST, or Representational State Transfer, is an architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other. Context: https://dev.to/cassiocappellari/fundamentals-of-rest-api-2nag, https://www.redhat.com/en/topics/api/what-is-a-rest-api, https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm, https://restapitutorial.com/, https://app.daily.dev/tags/rest-api?ref=roadmapsh"
What is JSON APIs?,"JSON or JavaScript Object Notation is an encoding scheme that is designed to eliminate the need for an ad-hoc code for each application to communicate with servers that communicate in a defined way. JSON API module exposes an implementation for data stores and data structures, such as entity types, bundles, and fields. Context: https://jsonapi.org/, https://jsonapi.org/implementations/, https://www.youtube.com/watch?v=N-4prIh7t38"
What is SOAP?,"Simple Object Access Protocol (SOAP) is a message protocol for exchanging information between systems and applications. When it comes to application programming interfaces (APIs), a SOAP API is developed in a more structured and formalized way. SOAP messages can be carried over a variety of lower-level protocols, including the web-related Hypertext Transfer Protocol (HTTP) Context: https://www.w3schools.com/xml/xml_soap.asp"
What is gRPC?,"gRPC is a high-performance, open source universal RPC framework. RPC stands for Remote Procedure Call, there’s an ongoing debate on what the g stands for. RPC is a protocol that allows a program to execute a procedure of another program located on another computer. The great advantage is that the developer doesn’t need to code the details of the remote interaction. The remote procedure is called like any other function. But the client and the server can be coded in different languages. Context: https://grpc.io/, https://grpc.io/docs/, https://www.wallarm.com/what/the-concept-of-grpc, https://www.youtube.com/watch?v=hVrwuMnCtok, https://app.daily.dev/tags/grpc?ref=roadmapsh"
What is GraphQL?,"GraphQL is a query language and runtime system for APIs (application programming interfaces). It is designed to provide a flexible and efficient way for clients to request data from servers, and it is often used as an alternative to REST (representational state transfer) APIs. One of the main features of GraphQL is its ability to specify exactly the data that is needed, rather than receiving a fixed set of data from an endpoint. This allows clients to request only the data that they need, and it reduces the amount of data that needs to be transferred over the network. GraphQL also provides a way to define the structure of the data that is returned from the server, allowing clients to request data in a predictable and flexible way. This makes it easier to build and maintain client applications that depend on data from the server. GraphQL is widely used in modern web and mobile applications, and it is supported by a large and active developer community. Context: https://graphql.org/, https://www.youtube.com/watch?v=eIQh02xuVw4, https://app.daily.dev/tags/graphql?ref=roadmapsh"
What is JWT?,"JWT stands for JSON Web Token is a token-based encryption open standard/methodology that is used to transfer information securely as a JSON object. Clients and Servers use JWT to securely share information, with the JWT containing encoded JSON objects and claims. JWT tokens are designed to be compact, safe to use within URLs, and ideal for SSO contexts. Context: https://jwt.io/, https://jwt.io/introduction, https://www.akana.com/blog/what-is-jwt, https://www.youtube.com/watch?v=7Q17ubqLfaM, https://www.youtube.com/watch?v=926mknSW9Lo, https://app.daily.dev/tags/jwt?ref=roadmapsh"
What is OAuth?,"OAuth stands for Open Authorization and is an open standard for authorization. It works to authorize devices, APIs, servers and applications using access tokens rather than user credentials, known as “secure delegated access”. In its most simplest form, OAuth delegates authentication to services like Facebook, Amazon, Twitter and authorizes third-party applications to access the user account without having to enter their login and password. It is mostly utilized for REST/APIs and only provides a limited scope of a user’s data. Context: https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth, https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2, https://www.youtube.com/watch?v=t4-416mg6iU, https://www.youtube.com/watch?v=CPbvxxslDTU, https://app.daily.dev/tags/oauth?ref=roadmapsh"
What is Basic Authentication?,"Given the name “Basic Authentication”, you should not confuse Basic Authentication with the standard username and password authentication. Basic authentication is a part of the HTTP specification, and the details can be found in the RFC7617. Because it is a part of the HTTP specifications, all the browsers have native support for “HTTP Basic Authentication”. Context: https://roadmap.sh/guides/http-basic-authentication, https://www.youtube.com/watch?v=mwccHwUn7Gc, https://app.daily.dev/tags/authentication?ref=roadmapsh"
What is Token Authentication?,"Token-based authentication is a protocol which allows users to verify their identity, and in return receive a unique access token. During the life of the token, users then access the website or app that the token has been issued for, rather than having to re-enter credentials each time they go back to the same webpage, app, or any resource protected with that same token. Auth tokens work like a stamped ticket. The user retains access as long as the token remains valid. Once the user logs out or quits an app, the token is invalidated. Token-based authentication is different from traditional password-based or server-based authentication techniques. Tokens offer a second layer of security, and administrators have detailed control over each action and transaction. But using tokens requires a bit of coding know-how. Most developers pick up the techniques quickly, but there is a learning curve. Context: https://www.okta.com/identity-101/what-is-token-based-authentication/, https://app.daily.dev/tags/authentication?ref=roadmapsh, https://www.google.com/search?q=token%20authentication%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=token+authentication+for+backend+developer"
What is Cookie-Based Authentication?,"Cookies are pieces of data used to identify the user and their preferences. The browser returns the cookie to the server every time the page is requested. Specific cookies like HTTP cookies are used to perform cookie-based authentication to maintain the session for each user. Context: https://stackoverflow.com/questions/17769011/how-does-cookie-based-authentication-work, https://www.google.com/search?q=cookie-based%20authentication%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=cookie-based+authentication+for+backend+developer"
What is OpenID?,"OpenID is a protocol that utilizes the authorization and authentication mechanisms of OAuth 2.0 and is now widely adopted by many identity providers on the Internet. It solves the problem of needing to share user’s personal info between many different web services(e.g. online shops, discussion forums etc. Context: https://openid.net/, https://openid.net/developers/how-connect-works/, https://www.securew2.com/blog/oauth-vs-openid-which-is-better, https://www.youtube.com/watch?v=t18YB3xDfXI, https://www.youtube.com/watch?v=996OiexHze0, https://app.daily.dev/tags/authentication?ref=roadmapsh"
What is SAML?,"SAML stands for Security Assertion Markup Language. It is an XML-based standard for exchanging authentication and authorization data between parties, particularly between an identity provider (IdP) and a service provider (SP). In a SAML-based system, a user requests access to a protected resource. The service provider asks the identity provider to authenticate the user and assert whether they are granted access to the resource. Context: https://www.google.com/search?q=%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=+for+backend+developer"
What is HATEOAS?,"HATEOAS is an acronym for Hypermedia As The Engine Of Application State, it’s the concept that when sending information over a RESTful API the document received should contain everything the client needs in order to parse and use the data that is they don’t have to contact any other endpoint not explicitly mentioned within the Document. Context: https://restcookbook.com/Basics/hateoas/, https://www.google.com/search?q=hateoas%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=hateoas+for+backend+developer"
What is OpenAPI?,"The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic. An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases. Context: https://swagger.io/specification/, https://swagger.io/tools/swagger-editor/, https://swagger.io/docs/specification/about/, https://www.youtube.com/watch?v=6kwmW_p_Tig"
What is Intro to Caching?,"Caching is a technique of storing frequently used data or results of complex computations in a local memory, for a certain period. So, next time, when the client requests the same information, instead of retrieving the information from the database, it will give the information from the local memory. The main advantage of caching is that it improves performance by reducing the processing burden. NB! Caching is a complicated topic that has obvious benefits but can lead to pitfalls like stale data, cache invalidation, distributed caching etc. Context: https://www.google.com/search?q=caching%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=caching+for+backend+developer"
What is Server_Side_p?,"Server-side caching temporarily stores web files and data on the origin server to reuse later. When the user first requests for the webpage, the website goes under the normal process of retrieving data from the server and generates or constructs the webpage of the website. After the request has happened and the response has been sent back, the server copies the webpage and stores it as a cache. Next time the user revisits the website, it loads the already saved or cached copy of the webpage, thus making it faster. Context: https://www.naukri.com/code360/library/server-side-caching-and-client-side-caching, https://medium.com/@genchilu/cache-strategy-in-backend-d0baaacd2d79, https://redis.io/glossary/distributed-caching/, https://medium.com/@himani.prasad016/caching-in-hibernate-3ad4f479fcc0, https://app.daily.dev/tags/webdev?ref=roadmapsh"
What is ServerSide_Memcached_g?,"Memcached (pronounced variously mem-cash-dee or mem-cashed) is a general-purpose distributed memory-caching system. It is often used to speed up dynamic database-driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read. Memcached is free and open-source software, licensed under the Revised BSD license. Memcached runs on Unix-like operating systems (Linux and macOS) and on Microsoft Windows. It depends on the libevent library. Memcached’s APIs provide a very large hash table distributed across multiple machines. When the table is full, subsequent inserts cause older data to be purged in the least recently used (LRU) order. Applications using Memcached typically layer requests and additions into RAM before falling back on a slower backing store, such as a database. Memcached has no internal mechanism to track misses which may happen. However, some third-party utilities provide this functionality. Context: https://github.com/memcached/memcached#readme, https://en.wikipedia.org/wiki/Memcached, https://www.tutorialspoint.com/memcached/index.htm"
What is Server_Side_Redis_p?,"Redis is an open source (BSD licensed), in-memory data structure store used as a database, cache, message broker, and streaming engine. Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions, and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster. Context: https://redis.io/, https://www.youtube.com/watch?v=G1rOthIU-uo, https://app.daily.dev/tags/redis?ref=roadmapsh"
What is CDN_p?,"A Content Delivery Network (CDN) service aims to provide high availability and performance improvements of websites. This is achieved with fast delivery of website assets and content typically via geographically closer endpoints to the client requests. Traditional commercial CDNs (Amazon CloudFront, Akamai, CloudFlare and Fastly) provide servers across the globe which can be used for this purpose. Serving assets and contents via a CDN reduces bandwidth on website hosting, provides an extra layer of caching to reduce potential outages and can improve website security as well Context: https://www.cloudflare.com/en-ca/learning/cdn/what-is-a-cdn/, https://en.wikipedia.org/wiki/Content_delivery_network, https://www.youtube.com/watch?v=841kyd_mfH0, https://www.youtube.com/watch?v=Bsq5cKkS33I"
What is Client-side_p?,"Client-side caching is the storage of network data to a local cache for future re-use. After an application fetches network data, it stores that resource in a local cache. Once a resource has been cached, the browser uses the cache on future requests for that resource to boost performance. Context: https://www.youtube.com/watch?v=HiBDZgTNpXY, https://www.google.com/search?q=client%20side%20caching%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=client+side+caching+for+backend+developer"
What is Intro to Web Security?,"Web security refers to the protective measures taken by the developers to protect the web applications from threats that could affect the business. Context: https://github.com/0xRadi/OWASP-Web-Checklist, https://web.dev/articles/why-https-matters, https://sucuri.net/guides/owasp-top-10-security-vulnerabilities-2020/, https://en.wikipedia.org/wiki/OWASP, https://cheatsheetseries.owasp.org/cheatsheets/AJAX_Security_Cheat_Sheet.html, https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP, https://app.daily.dev/tags/security?ref=roadmapsh"
What is MD5?,"MD5 (Message-Digest Algorithm 5) is a hash function that is currently advised not to be used due to its extensive vulnerabilities. It is still used as a checksum to verify data integrity. Context: https://en.wikipedia.org/wiki/MD5, https://www.techtarget.com/searchsecurity/definition/MD5, https://infosecscout.com/why-md5-is-not-safe/"
What is SHA?,"SHA (Secure Hash Algorithms) is a family of cryptographic hash functions created by the NIST (National Institute of Standards and Technology). The family includes: SHA-0: Published in 1993, this is the first algorithm in the family. Shortly after its release, it was discontinued for an undisclosed significant flaw. SHA-1: Created to replace SHA-0 and which resembles MD5, this algorithm has been considered insecure since 2010. SHA-2: This isn’t an algorithm, but a set of them, with SHA-256 and SHA-512 being the most popular. SHA-2 is still secure and widely used. SHA-3: Born in a competition, this is the newest member of the family. SHA-3 is very secure and doesn’t carry the same design flaws as its brethren. Context: https://en.wikipedia.org/wiki/SHA-1, https://en.wikipedia.org/wiki/SHA-2, https://en.wikipedia.org/wiki/SHA-3"
What is Scrypt?,"Scrypt (pronounced “ess crypt”) is a password hashing function (like bcrypt). It is designed to use a lot of hardware, which makes brute-force attacks more difficult. Scrypt is mainly used as a proof-of-work algorithm for cryptocurrencies. Context: https://en.wikipedia.org/wiki/Scrypt, https://www.google.com/search?q=scrypt%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=scrypt+for+backend+developer"
What is Bcrypt?,"bcrypt is a password hashing function, that has been proven reliable and secure since it’s release in 1999. It has been implemented into most commonly-used programming languages. Context: https://www.npmjs.com/package/bcrypt, https://auth0.com/blog/hashing-in-action-understanding-bcrypt/, https://www.youtube.com/watch?v=O6cmuiTBZVs"
What is HTTPS?,"HTTPS is a secure way to send data between a web server and a browser. A communication through HTTPS starts with the handshake phase during which the server and the client agree on how to encrypt the communication, in particular they choose an encryption algorithm and a secret key. After the handshake all the communication between the server and the client will be encrypted using the agreed upon algorithm and key. The handshake phase uses a particular kind of cryptography, called asymmetric cryptography, to communicate securely even though client and server have not yet agreed on a secret key. After the handshake phase the HTTPS communication is encrypted with symmetric cryptography, which is much more efficient but requires client and server to both have knowledge of the secret key. Context: https://www.cloudflare.com/en-gb/learning/ssl/what-is-https/, https://web.dev/articles/why-https-matters, https://web.dev/articles/enable-https, https://howhttps.works/, https://baida.dev/articles/https-explained-with-carrier-pigeons, https://www.youtube.com/watch?v=hExRDVZHhig, https://www.youtube.com/watch?v=GoXgl9r0Kjk"
What is OWASP?,"OWASP or Open Web Application Security Project is an online community that produces freely-available articles, methodologies, documentation, tools, and technologies in the field of web application security. Context: https://github.com/OWASP/ASVS, https://en.wikipedia.org/wiki/OWASP, https://cheatsheetseries.owasp.org/IndexTopTen.html, https://cheatsheetseries.owasp.org/cheatsheets/AJAX_Security_Cheat_Sheet.html"
What is CORS?,"Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. Context: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS, https://rbika.com/blog/understanding-cors, https://www.youtube.com/watch?v=4KHiSt0oLJ0, https://www.youtube.com/watch?v=PNtFSVU-YTI"
What is SSL/TLS?,"Secure Sockets Layer (SSL) and Transport Layer Security (TLS) are cryptographic protocols used to provide security in internet communications. These protocols encrypt the data that is transmitted over the web, so anyone who tries to intercept packets will not be able to interpret the data. One difference that is important to know is that SSL is now deprecated due to security flaws, and most modern web browsers no longer support it. But TLS is still secure and widely supported, so preferably use TLS. Context: https://en.wikipedia.org/wiki/Transport_Layer_Security, https://www.cloudflare.com/learning/ssl/what-is-ssl/, https://www.youtube.com/watch?v=j9QmMEWmcfo"
What is CSP?,"Content Security Policy is a computer security standard introduced to prevent cross-site scripting, clickjacking and other code injection attacks resulting from execution of malicious content in the trusted web page context. Context: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP, https://web.dev/articles/csp, https://app.daily.dev/tags/security?ref=roadmapsh"
What is Server Security?,"Learn about the security of your server and how to secure it. Here are some of the topics off the top of my head: Use a firewall: One of the most effective ways to secure a server is to use a firewall to block all unnecessary incoming traffic. You can use iptables on Linux systems or a hardware firewall to do this. Close unnecessary ports: Make sure to close any ports that are not needed for your server to function properly. This will reduce the attack surface of your server and make it more difficult for attackers to gain access. Use strong passwords: Use long, complex passwords for all of your accounts, and consider using a password manager to store them securely. Keep your system up to date: Make sure to keep your operating system and software up to date with the latest security patches. This will help to prevent vulnerabilities from being exploited by attackers. Use SSL/TLS for communication: Use Secure Sockets Layer (SSL) or Transport Layer Security (TLS) to encrypt communication between your server and client devices. This will help to protect against man-in-the-middle attacks and other types of cyber threats. Use a intrusion detection system (IDS): An IDS monitors network traffic and alerts you to any suspicious activity, which can help you to identify and respond to potential threats in a timely manner. Enable two-factor authentication: Two-factor authentication adds an extra layer of security to your accounts by requiring a second form of authentication, such as a code sent to your phone, in addition to your password. Context: https://www.google.com/search?q=server%20security%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=server+security+for+backend+developer"
What is Intro to Testing?,"A key to building software that meets requirements without defects is testing. Software testing helps developers know they are building the right software. When tests are run as part of the development process (often with continuous integration tools), they build confidence and prevent regressions in the code. Context: https://www.guru99.com/software-testing-introduction-importance.html, https://www.browserstack.com/guide/testing-pyramid-for-test-automation, https://app.daily.dev/tags/testing?ref=roadmapsh"
What is Integration testing?,"Integration testing is a broad category of tests where multiple software modules are integrated and tested as a group. It is meant to test the interaction between multiple services, resources, or modules. For example, an API’s interaction with a backend service, or a service with a database. Context: https://www.guru99.com/integration-testing.html, https://thenewstack.io/how-to-integrate-and-test-your-tech-stack/, https://www.youtube.com/watch?v=QYCaaNz8emY, https://app.daily.dev/tags/testing?ref=roadmapsh"
What is Unit testing?,"Unit testing is where individual units (modules, functions/methods, routines, etc.) of software are tested to ensure their correctness. This low-level testing ensures smaller components are functionally sound while taking the burden off of higher-level tests. Generally, a developer writes these tests during the development process and they are run as automated tests. Context: "
What is Functional Testing?,"Functional testing is where software is tested to ensure functional requirements are met. Usually, it is a form of black box testing in which the tester has no understanding of the source code; testing is performed by providing input and comparing expected/actual output. It contrasts with non-functional testing, which includes performance, load, scalability, and penetration testing. Context: https://www.guru99.com/functional-testing.html, https://www.youtube.com/watch?v=j_79AXkG4PY, https://app.daily.dev/tags/testing?ref=roadmapsh"
What is I?,"CI/CD (Continuous Integration/Continuous Deployment) is the practice of automating building, testing, and deployment of applications with the main goal of detecting issues early, and provide quicker releases to the production environment. Context: https://about.gitlab.com/topics/ci-cd/, https://thenewstack.io/a-primer-continuous-integration-and-continuous-delivery-ci-cd/, https://thenewstack.io/3-ways-to-use-automation-in-ci-cd-pipelines/, https://thenewstack.io/ci-cd/, https://www.youtube.com/watch?v=scEDHsr3APg, https://www.youtube.com/watch?v=nyKZTKQS_EQ, https://app.daily.dev/tags/cicd?ref=roadmapsh"
What is Intro to Databases?,"A database is a collection of useful data of one or more related organizations structured in a way to make data an asset to the organization. A database management system is a software designed to assist in maintaining and extracting large collections of data in a timely fashion. Context: https://www.oracle.com/database/what-is-database/, https://www.prisma.io/dataguide/intro/what-are-databases, https://app.daily.dev/tags/backend?ref=roadmapsh"
What is ORM's?,"Object-Relational Mapping (ORM) is a technique that lets you query and manipulate data from a database using an object-oriented paradigm. When talking about ORM, most people are referring to a library that implements the Object-Relational Mapping technique, hence the phrase “an ORM”. Context: https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping, https://stackoverflow.com/questions/1279613/what-is-an-orm-how-does-it-work-and-how-should-i-use-one/1279678#1279678, https://app.daily.dev/tags/backend?ref=roadmapsh"
What is ACID?,"ACID are the four properties of relational database systems that help in making sure that we are able to perform the transactions in a reliable manner. It’s an acronym which refers to the presence of four properties: atomicity, consistency, isolation and durability Context: https://retool.com/blog/whats-an-acid-compliant-database"
What is TRANSACTION?,"In short, a database transaction is a sequence of multiple operations performed on a database, and all served as a single logical unit of work — taking place wholly or not at all. In other words, there’s never a case where only half of the operations are performed and the results saved. Context: https://fauna.com/blog/database-transaction, https://www.google.com/search?q=transactions%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=transactions+for+backend+developer"
What is N+1?,"The N+1 query problem happens when your code executes N additional query statements to fetch the same data that could have been retrieved when executing the primary query. Context: https://medium.com/doctolib/understanding-and-fixing-n-1-query-30623109fe89, https://planetscale.com/blog/what-is-n-1-query-problem-and-how-to-solve-it, https://dev.to/jackynote/solving-the-notorious-n1-problem-optimizing-database-queries-for-java-backend-developers-2o0p"
What is Normalisation?,"Database normalization is the process of structuring a relational database in accordance with a series of so-called normal forms in order to reduce data redundancy and improve data integrity. It was first proposed by Edgar F. Codd as part of his relational model. Normalization entails organizing the columns (attributes) and tables (relations) of a database to ensure that their dependencies are properly enforced by database integrity constraints. It is accomplished by applying some formal rules either by a process of synthesis (creating a new database design) or decomposition (improving an existing database design). Context: https://www.guru99.com/database-normalization.html, https://en.wikipedia.org/wiki/Database_normalization, https://www.youtube.com/watch?v=xoTyrdT9SZI, https://app.daily.dev/tags/database?ref=roadmapsh"
What is Failure Modes?,"There are several different failure modes that can occur in a database, including: 1.Read contention: This occurs when multiple clients or processes are trying to read data from the same location in the database at the same time, which can lead to delays or errors. 2.Write contention: This occurs when multiple clients or processes are trying to write data to the same location in the database at the same time, which can lead to delays or errors. 3.Thundering herd: This occurs when a large number of clients or processes try to access the same resource simultaneously, which can lead to resource exhaustion and reduced performance. 4.Cascade: This occurs when a failure in one part of the database system causes a chain reaction that leads to failures in other parts of the system. 5.Deadlock: This occurs when two or more transactions are waiting for each other to release a lock on a resource, leading to a standstill. 6.Corruption: This occurs when data in the database becomes corrupted, which can lead to errors or unexpected results when reading or writing to the database. 7.Hardware failure: This occurs when hardware components, such as disk drives or memory, fail, which can lead to data loss or corruption. 8.Software failure: This occurs when software components, such as the database management system or application, fail, which can lead to errors or unexpected results. 9.Network failure: This occurs when the network connection between the database and the client is lost, which can lead to errors or timeouts when trying to access the database. 10.Denial of service (DoS) attack: This occurs when a malicious actor attempts to overwhelm the database with requests, leading to resource exhaustion and reduced performance. Context: https://www.google.com/search?q=failure%20modes%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=failure+modes+for+backend+developer"
What is Profiling Performance?,"There are several ways to profile the performance of a database 1.Monitor system performance: You can use tools like the Windows Task Manager or the Unix/Linux top command to monitor the performance of your database server. These tools allow you to see the overall CPU, memory, and disk usage of the system, which can help identify any resource bottlenecks. 2.Use database-specific tools: Most database management systems (DBMSs) have their own tools for monitoring performance. For example, Microsoft SQL Server has the SQL Server Management Studio (SSMS) and the sys.dm_os_wait_stats dynamic management view, while Oracle has the Oracle Enterprise Manager and the v$waitstat view. These tools allow you to see specific performance metrics, such as the amount of time spent waiting on locks or the number of physical reads and writes. 3.Use third-party tools: There are also several third-party tools that can help you profile the performance of a database. Some examples include SolarWinds Database Performance Analyzer, Quest Software Foglight, and Redgate SQL Monitor. These tools often provide more in-depth performance analysis and can help you identify specific issues or bottlenecks. 4.Analyze slow queries: If you have specific queries that are running slowly, you can use tools like EXPLAIN PLAN or SHOW PLAN in MySQL or SQL Server to see the execution plan for the query and identify any potential issues. You can also use tools like the MySQL slow query log or the SQL Server Profiler to capture slow queries and analyze them further. 5.Monitor application performance: If you are experiencing performance issues with a specific application that is using the database, you can use tools like Application Insights or New Relic to monitor the performance of the application and identify any issues that may be related to the database. Context: https://www.google.com/search?q=profiling%20performance%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=profiling+performance+for+backend+developer"
What is Intro to Scaling Databases?,"Scaling databases is the process of adapting them to handle more data and users efficiently. It’s achieved by either upgrading existing hardware (vertical scaling) or adding more servers (horizontal scaling). Techniques like sharding and replication are key. This ensures databases continue to be a robust asset as they grow. Context: https://app.daily.dev/tags/backend?ref=roadmapsh, https://www.mongodb.com/resources/basics/scaling, https://www.google.com/search?q=scaling%20databases%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=scaling+databases+for+backend+developer"
What is Database Indexes_p?,"An index is a data structure that you build and assign on top of an existing table that basically looks through your table and tries to analyze and summarize so that it can create shortcuts. Context: https://www.youtube.com/watch?v=-qNSXK7s7_w, https://app.daily.dev/tags/database?ref=roadmapsh, https://www.google.com/search?q=database%20indexes%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=database+indexes+for+backend+developer"
What is Data replication_o?,"Data replication is the process by which data residing on a physical/virtual server(s) or cloud instance (primary instance) is continuously replicated or copied to a secondary server(s) or cloud instance (standby instance). Organizations replicate data to support high availability, backup, and/or disaster recovery. Context: https://www.youtube.com/watch?v=fUrKt-AQYtE, ]https://www.google.com/search?q=data%20replication%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=data+replication+for+backend+developer"
What is Sharding Strategy?,"Sharding strategy is a technique to split a large dataset into smaller chunks (logical shard) in which we distribute these chunks in different machines/database nodes in order to distribute the traffic load. It’s a good mechanism to improve the scalability of an application. Many databases support sharding, but not all. Context: https://en.wikipedia.org/wiki/Shard_(database_architecture), https://stackoverflow.blog/2022/03/14/how-sharding-a-database-can-make-it-faster/, https://app.daily.dev/tags/backend?ref=roadmapsh"
What is Cap_o?,"CAP is an acronym that stands for Consistency, Availability and Partition Tolerance. According to CAP theorem, any distributed system can only guarantee two of the three properties at any point of time. You can’t guarantee all three properties at once. Context: https://www.bmc.com/blogs/cap-theorem/, https://en.wikipedia.org/wiki/CAP_theorem, https://mwhittaker.github.io/blog/an_illustrated_proof_of_the_cap_theorem/, https://www.ibm.com/topics/cap-theorem, https://www.youtube.com/watch?v=_RbsFXWRZ10"
What is Intro to Architectural Patterns?,"An architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context. The architectural patterns address various issues in software engineering, such as computer hardware performance limitations, high availability and minimization of a business risk. Context: https://www.redhat.com/architect/14-software-architecture-patterns, https://towardsdatascience.com/10-common-software-architectural-patterns-in-a-nutshell-a0b47a1e9013, https://www.google.com/search?q=architectural%20patterns%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=architectural+patterns+for+backend+developer"
What is Monolithic architecture?,"Monolithic architecture is a pattern in which an application handles requests, executes business logic, interacts with the database, and creates the HTML for the front end. In simpler terms, this one application does many things. It’s inner components are highly coupled and deployed as one unit. It is recommended to build simple applications as a monolith for faster development cycle. Also suitable for Proof-of-Concept(PoC) projects. Context: https://microservices.io/patterns/monolithic.html, https://datamify.medium.com/monolithic-architecture-advantages-and-disadvantages-e71a603eec89, https://www.google.com/search?q=monolithic%20apps%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=monolithic+apps+for+backend+developer"
What is Microservices?,"Microservice architecture is a pattern in which highly cohesive, loosely coupled services are separately developed, maintained, and deployed. Each component handles an individual function, and when combined, the application handles an overall business function. Context: https://microservices.io/patterns/microservices.html, https://smartbear.com/learn/api-design/microservices/, https://thenewstack.io/microservices/microservices-101/, https://thenewstack.io/microservices/primer-microservices-explained/, https://thenewstack.io/microservices/, https://app.daily.dev/tags/microservices?ref=roadmapsh"
What is Serverless?,"Serverless is an architecture in which a developer builds and runs applications without provisioning or managing servers. With cloud computing/serverless, servers exist but are managed by the cloud provider. Resources are used as they are needed, on demand and often using auto scaling. Context: https://www.ibm.com/topics/serverless, https://aws.amazon.com/serverless/, https://www.youtube.com/watch?v=W_VV2Fx32_Y, https://app.daily.dev/tags/serverless?ref=roadmapsh"
What is Service Mesh?,"A service mesh is an architectural pattern for enhancing communication, security, and management between microservices in a distributed network. It employs a collection of intelligent proxies to manage service-to-service communication, ensuring high availability, efficient load balancing, and robust service discovery. Additionally, a service mesh offers advanced features like observability for monitoring network behavior, and various traffic management capabilities. In a typical service mesh setup, each microservice is paired with a proxy. This proxy, often deployed using a sidecar pattern, is responsible not only for handling communication to and from its associated microservice but also for implementing various network functionalities. These functionalities include load balancing, intelligent routing, and ensuring secure data transfer. The sidecar pattern, integral to service meshes, involves deploying the proxy as a sidecar container alongside the main microservice container, especially in Kubernetes environments. This design allows the service mesh to function independently from the microservices themselves, simplifying management and updates. Popular service mesh implementations include Istio and Linkerd, which offer robust solutions tailored to modern, cloud-based application architectures. Context: https://aws.amazon.com/what-is/service-mesh/, https://www.redhat.com/en/topics/microservices/what-is-a-service-mesh, https://www.youtube.com/watch?v=QiXK0B9FhO0, https://app.daily.dev/tags/service-mesh?ref=roadmapsh"
What is Twelve Factor?,"The Twelve-Factor App is a methodology for building scalable and maintainable software-as-a-service (SaaS) applications. It is based on a set of best practices that were identified by the authors of the methodology as being essential for building modern, cloud-native applications. The Twelve-Factor App methodology consists of the following principles: 1.Codebase: There should be a single codebase for the application, with multiple deployments. 2.Dependencies: The application should explicitly declare and isolate its dependencies. 3.Config: The application should store configuration in the environment. 4.Backing services: The application should treat backing services as attached resources. 5.Build, release, run: The application should be built, released, and run as an isolated unit. 6.Processes: The application should be executed as one or more stateless processes. 7.Port binding: The application should expose its services through port binding. 8.Concurrency: The application should scale out by adding more processes, not by adding threads. 9.Disposability: The application should be designed to start and stop quickly. 10.Dev/prod parity: The development, staging, and production environments should be as similar as possible. 11.Logs: The application should treat logs as event streams. 12.Admin processes: The application should run admin/maintenance tasks as one-off processes.  The Twelve-Factor App methodology is widely adopted by developers of SaaS applications, and it is seen as a best practice for building cloud-native applications that are scalable, maintainable, and easy to deploy. Context: https://12factor.net/, https://www.google.com/search?q=twelve-factor%20apps%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=twelve-factor+apps+for+backend+developer"
What is Intro to Design and Development Principles?,"In this section, we’ll discuss some essential design and development principles to follow while building the backend of any application. These principles will ensure that the backend is efficient, scalable, and maintainable. 1. Separation of Concerns (SoC)- Separation of Concerns is a fundamental principle that states that different functionalities of a system should be as independent as possible. This approach improves maintainability and scalability by allowing developers to work on separate components without affecting each other. Divide your backend into clear modules and layers, such as data storage, business logic, and network communication.2. Reusability- Reusability is the ability to use components, functions, or modules in multiple places without duplicating code. While designing the backend, look for opportunities where you can reuse existing code. Use techniques like creating utility functions, abstract classes, and interfaces to promote reusability and reduce redundancy. 3. Keep It Simple and Stupid (KISS)- KISS principle states that the simpler the system, the easier it is to understand, maintain, and extend. When designing the backend, try to keep the architecture and code as simple as possible. Use clear naming conventions and modular structures, and avoid over-engineering and unnecessary complexity. 4. Don’t Repeat Yourself (DRY)- Do not duplicate code or functionality across your backend. Duplication can lead to inconsistency and maintainability issues. Instead, focus on creating reusable components, functions or modules, which can be shared across different parts of the backend. 5. Scalability- A scalable system is one that can efficiently handle an increasing number of users, requests, or data. Design the backend with scalability in mind, considering factors such as data storage, caching, load balancing, and horizontal scaling (adding more instances of the backend server). 6. Security- Security is a major concern when developing any application. Always follow best practices to prevent security flaws, such as protecting sensitive data, using secure communication protocols (e.g., HTTPS), implementing authentication and authorization mechanisms, and sanitizing user inputs. 7. Testing- Testing is crucial for ensuring the reliability and stability of the backend. Implement a comprehensive testing strategy, including unit, integration, and performance tests. Use automated testing tools and set up continuous integration (CI) and continuous deployment (CD) pipelines to streamline the testing and deployment process. 8. Documentation- Proper documentation helps developers understand and maintain the backend codebase. Write clear and concise documentation for your code, explaining the purpose, functionality, and how to use it. Additionally, use comments and appropriate naming conventions to make the code itself more readable and self-explanatory. By following these design and development principles, you’ll be well on your way to creating an efficient, secure, and maintainable backend for your applications. Context: https://www.google.com/search?q=design%20and%20development%20principles%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=design+and+development+principles+for+backend+developer"
What is Gof Patterns?,"The Gang of Four (GoF) design patterns are a set of design patterns for object-oriented software development that were first described in the book “Design Patterns: Elements of Reusable Object-Oriented Software” by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (also known as the Gang of Four). The GoF design patterns are divided into three categories: Creational, Structural and Behavioral. 1.Creational Patterns 2.Structural Patterns 3.Behavioral Patterns Context: https://www.digitalocean.com/community/tutorials/gangs-of-four-gof-design-patterns, https://www.youtube.com/watch?v=_sa2WlAFWQo, https://www.google.com/search?q=gof%20design%20patterns%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=gof+design+patterns+for+backend+developer"
What is Domain-driven Design?,"Domain-driven design (DDD) is a software design approach focusing on modeling software to match a domain according to input from that domain’s experts. In terms of object-oriented programming, it means that the structure and language of software code (class names, class methods, class variables) should match the business domain. For example, if a software processes loan applications, it might have classes like LoanApplication and Customer, and methods such as AcceptOffer and Withdraw. DDD connects the implementation to an evolving model and it is predicated on the following goals: 1.Placing the project’s primary focus on the core domain and domain logic. 2.Basing complex designs on a model of the domain; 3.Initiating a creative collaboration between technical and domain experts to iteratively refine a conceptual model that addresses particular domain problems. Context: https://redis.io/glossary/domain-driven-design-ddd/, https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215, https://app.daily.dev/tags/domain-driven-design?ref=roadmapsh"
What is Test Driven Development?,"Test driven development (TDD) is the process of writing tests for software’s requirements which will fail until the software is developed to meet those requirements. Once those tests pass, then the cycle repeats to refactor code or develop another feature/requirement. In theory, this ensures that software is written to meet requirements in the simplest form, and avoids code defects. Context: https://www.guru99.com/test-driven-development.html, https://www.ibm.com/garage, https://www.youtube.com/watch?v=uGaNkTahrIw, https://app.daily.dev/tags/tdd?ref=roadmapsh"
What is CQRS_o?,"CQRS, or command query responsibility segregation, defines an architectural pattern where the main focus is to separate the approach of reading and writing operations for a data store. CQRS can also be used along with Event Sourcing pattern in order to persist application state as an ordered of sequence events, making it possible to restore data to any point in time. Context: https://learn.microsoft.com/en-us/azure/architecture/patterns/cqrs, https://www.google.com/search?q=cqrs%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=cqrs+for+backend+developer"
What is Event sourcing?,"Event sourcing is a design pattern in which the state of a system is represented as a sequence of events that have occurred over time. In an event-sourced system, changes to the state of the system are recorded as events and stored in an event store. The current state of the system is derived by replaying the events from the event store. One of the main benefits of event sourcing is that it provides a clear and auditable history of all the changes that have occurred in the system. This can be useful for debugging and for tracking the evolution of the system over time. Event sourcing is often used in conjunction with other patterns, such as Command Query Responsibility Segregation (CQRS) and domain-driven design, to build scalable and responsive systems with complex business logic. It is also useful for building systems that need to support undo/redo functionality or that need to integrate with external systems. Context: https://martinfowler.com/eaaDev/EventSourcing.html, https://app.daily.dev/tags/architecture?ref=roadmapsh, https://www.google.com/search?q=event%20sourcing%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=event+sourcing+for+backend+developer"
What is Introduction?,"Containers and virtual machines are the two most popular approaches to setting up a software infrastructure for your organization. Context: https://middleware.io/blog/containerization-vs-virtualization/, https://www.youtube.com/watch?v=1WnDHitznGY, https://app.daily.dev/tags/containers?ref=roadmapsh"
What is Kubernetes?,"Kubernetes, also known as k8s, is an open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. It provides a way to abstract the underlying infrastructure and manage applications at scale, while also offering flexibility, portability, and a rich feature set. Kubernetes has become the de facto standard for container orchestration due to its widespread adoption, active community, and ability to handle complex, multi-tiered applications. Context: https://roadmap.sh/kubernetes"
What is LXC?,"LXC is an abbreviation used for Linux Containers which is an operating system that is used for running multiple Linux systems virtually on a controlled host via a single Linux kernel. LXC is a userspace interface for the Linux kernel containment features. Through a powerful API and simple tools, it lets Linux users easily create and manage system or application containers. Context: https://linuxcontainers.org/lxc/documentation/, https://linuxcontainers.org/lxc/introduction/, https://www.youtube.com/watch?v=_KnmRdK69qM, https://www.youtube.com/watch?v=CWmkSj_B-wo"
What is Docker?,"Docker is an open-source platform that automates the deployment, scaling, and management of applications by isolating them into lightweight, portable containers. Containers are standalone executable units that encapsulate all necessary dependencies, libraries, and configuration files required for an application to run consistently across various environments. Context: https://roadmap.sh/docker, https://www.google.com/search?q=what%20is%20docker?%20guide%20for%20docker, https://www.youtube.com/results?search_query=what+is+docker%3F+for+docker"
What is Intro to Message Brokers?,"Message brokers are an inter-application communication technology to help build a common integration mechanism to support cloud-native, microservices-based, serverless, and hybrid cloud architectures. Two of the most famous message brokers are RabbitMQ and Apache Kafka Context: https://www.youtube.com/watch?v=57Qr9tk6Uxc, https://www.google.com/search?q=message%20brokers%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=message+brokers+for+backend+developer"
What is RabbitMQ_g?,"With tens of thousands of users, RabbitMQ is one of the most popular open-source message brokers. RabbitMQ is lightweight and easy to deploy on-premises and in the cloud. It supports multiple messaging protocols. RabbitMQ can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements. Context: https://www.rabbitmq.com/tutorials, https://www.youtube.com/watch?v=nFxjaVmFj5E, https://www.youtube.com/watch?v=NQ3fZtyXji0, https://app.daily.dev/tags/rabbitmq?ref=roadmapsh"
What is Kafka?,"Apache Kafka is an open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications. Context: https://kafka.apache.org/quickstart, https://www.youtube.com/watch?v=B5j3uNBH8X4, https://app.daily.dev/tags/kafka?ref=roadmapsh"
What is Intro to Search Engine?,"A search engine is a software program that helps people find information on the internet by using keywords or phrases. Search engines work by constantly scanning the internet and indexing every page they find, which allows them to quickly return results. Context: https://en.wikipedia.org/wiki/Search_engine"
What is Elastic Engine?,"Elastic search at its core is a document-oriented search engine. It is a document based database that lets you INSERT, DELETE , RETRIEVE and even perform analytics on the saved records. But, Elastic Search is unlike any other general purpose database you have worked with, in the past. It’s essentially a search engine and offers an arsenal of features you can use to retrieve the data stored in it, as per your search criteria. And that too, at lightning speeds Context: https://www.elastic.co/elasticsearch, https://www.elastic.co/docs, https://app.daily.dev/tags/elk?ref=roadmapsh"
What is Solr?,"Solr is highly reliable, scalable and fault tolerant, providing distributed indexing, replication and load-balanced querying, automated failover and recovery, centralized configuration and more. Solr powers the search and navigation features of many of the world’s largest internet sites. Context: https://solr.apache.org/, https://solr.apache.org/resources.html#documentation, https://www.google.com/search?q=solr%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=solr+for+backend+developer"
What is Intro and its types?,"Web servers can be either hardware or software, or perhaps a combination of the two. 1.Hardware Side: A hardware web server is a computer that houses web server software and the files that make up a website (for example, HTML documents, images, CSS stylesheets, and JavaScript files). A web server establishes a connection to the Internet and facilitates the physical data exchange with other web-connected devices. 2.Software side: A software web server has a number of software components that regulate how hosted files are accessed by online users. This is at the very least an HTTP server. Software that knows and understands HTTP and URLs (web addresses) is known as an HTTP server (the protocol your browser uses to view webpages). The content of these hosted websites is sent to the end user’s device through an HTTP server, which may be accessed via the domain names of the websites it holds. Basically, an HTTP request is made by a browser anytime it wants a file that is stored on a web server. The relevant (hardware) web server receives the request, which is then accepted by the appropriate (software) HTTP server, which then locates the requested content and returns it to the browser over HTTP. (If the server cannot locate the requested page, it responds with a 404 error.) Context: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_web_server, https://www.youtube.com/watch?v=9J1nJOivdyw, https://www.google.com/search?q=web%20servers%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=web+servers+for+backend+developer"
What is NGINX?,"NGINX is a powerful web server and uses a non-threaded, event-driven architecture that enables it to outperform Apache if configured correctly. It can also do other important things, such as load balancing, HTTP caching, or be used as a reverse proxy. Context: https://nginx.org/, https://www.youtube.com/watch?v=JKxlsvZXG7c, https://app.daily.dev/tags/nginx?ref=roadmapsh"
What is Apache?,"Apache is a free, open-source HTTP server, available on many operating systems, but mainly used on Linux distributions. It is one of the most popular options for web developers, as it accounts for over 30% of all the websites, as estimated by W3Techs. Context: https://httpd.apache.org/, https://www.youtube.com/watch?v=kaaenHXO4t4, https://app.daily.dev/tags/apache?ref=roadmapsh"
What is Caddy?,"The Caddy web server is an extensible, cross-platform, open-source web server written in Go. It has some really nice features like automatic SSL/HTTPs and a really easy configuration file. Context: https://caddyserver.com/, https://www.youtube.com/watch?v=t4naLFSlBpQ, https://www.google.com/search?q=caddy%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=caddy+for+backend+developer"
What is MS IIS?,"Internet Information Services (IIS) for Windows® Server is a flexible, secure and manageable Web server for hosting anything on the Web. Context: https://www.iis.net/, https://www.youtube.com/watch?v=1VdxPWwtISA, https://app.daily.dev/tags/.net?ref=roadmapsh"
What is Types?,"There are many ways to get real time data from the backend. Some of them are: 1.Websockets 2.Server Sent Events 3.Long Polling 4.Short Polling Context: https://www.google.com/search?q=real%20time%20data%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=real+time+data+for+backend+developer, https://www.youtube.com/watch?v=OsgrJDMPl58, https://www.pubnub.com/guides/long-polling/"
What is Server-sent Events?,"Server-Sent Events (SSE) is a technology that allows a web server to push data to a client in real-time. It uses an HTTP connection to send a stream of data from the server to the client, and the client can listen for these events and take action when they are received. SSE is useful for applications that require real-time updates, such as chat systems, stock tickers, and social media feeds. It is a simple and efficient way to establish a long-lived connection between a client and a server, and it is supported by most modern web browsers. To use SSE, the client must create an EventSource object and specify the URL of the server-side script that will send the events. The server can then send events by writing them to the response stream with the proper formatting. Context: https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events, https://www.google.com/search?q=server%20sent%20events%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=server+sent+events+for+backend+developer"
What is Web Sockets?,"Web sockets are defined as a two-way communication between the servers and the clients, which mean both the parties, communicate and exchange data at the same time. This protocol defines a full duplex communication from the ground up. Web sockets take a step forward in bringing desktop rich functionalities to the web browsers. Context: https://socket.io/, https://www.tutorialspoint.com/websockets/index.htm, https://www.youtube.com/watch?v=8ARodQ4Wlf4"
What is Long polling?,"Long polling is a technique where the client polls the server for new data. However, if the server does not have any data available for the client, instead of sending an empty response, the server holds the request and waits for some specified period of time for new data to be available. If new data becomes available during that time, the server immediately sends a response to the client, completing the open request. If no new data becomes available and the timeout period specified by the client expires, the server sends a response indicating that fact. The client will then immediately re-request data from the server, creating a new request-response cycle. Context: https://www.google.com/search?q=long%20polling%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=long+polling+for+backend+developer"
What is Short polling?,"Short polling is a technique where the client repeatedly polls the server for new data. This is the most common approach to polling. It’s simple to implement and understand, but it’s not the most efficient way of doing things. Context: https://www.google.com/search?q=short%20polling%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=short+polling+for+backend+developer"
What is Intro and roadmap?,"GraphQL is a query language and runtime for APIs. It is used to build and consume web service APIs. GraphQL allows clients to make a single API call to request exactly the data they need, in a predictable format. This allows for more efficient and flexible data retrieval, compared to traditional REST APIs where the client has to make multiple API calls to different endpoints, and may receive more data than it needs. With GraphQL, the client defines the structure of the data it needs, by sending a query to the server. The server then returns the requested data in the same structure, as defined by the query. The client can also make mutations to update or create data on the server. Context: https://graphql.org/learn/, https://roadmap.sh/graphql"
What is Intro?,"NoSQL databases offer data storage and retrieval that is modelled differently to “traditional” relational databases. NoSQL databases typically focus more on horizontal scaling, eventual consistency, speed and flexibility and is used commonly for big data and real-time streaming applications. NoSQL is often described as a BASE system (Basically Available, Soft state, Eventual consistency) as opposed to SQL/relational which typically focus on ACID (Atomicity, Consistency, Isolation, Durability). Common NoSQL data structures include key-value pair, wide column, graph and document. Context: https://www.mongodb.com/resources/basics/databases/nosql-explained, https://www.youtube.com/watch?v=0buKQHokLK8, https://www.youtube.com/watch?v=ruz-vK8IesE, https://app.daily.dev/tags/nosql?ref=roadmapsh"
What is NoSQL_Key-value?,"A key-value database (KV database) is a type of database that stores data as a collection of key-value pairs. In a KV database, each piece of data is identified by a unique key, and the value is the data associated with that key. KV databases are designed for fast and efficient storage and retrieval of data, and they are often used in applications that require high performance and low latency. They are particularly well-suited for storing large amounts of unstructured data, such as log data and user profiles. Some popular KV databases include Redis, Memcached, and LevelDB. These databases are often used in combination with other types of databases, such as relational databases or document databases, to provide a complete and scalable data storage solution. Context: https://en.wikipedia.org/wiki/Key%E2%80%93value_database, https://app.daily.dev/tags/backend?ref=roadmapsh"
What is DynamoDB_g?,"DynamoDB is a fully managed NoSQL database service provided by AWS, designed for high-performance applications that require low-latency data access at any scale. It supports key-value and document data models, allowing developers to store and retrieve any amount of data with predictable performance. DynamoDB is known for its seamless scalability, automatic data replication across multiple AWS regions, and built-in security features, making it ideal for use cases like real-time analytics, mobile apps, gaming, IoT, and more. Key features include flexible schema design, powerful query capabilities, and integration with other AWS services. Context: https://www.google.com/search?q=dynamodb%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=dynamodb+for+backend+developer"
What is DocumentDBs_MongoDB_p?,"MongoDB is a source-available cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with optional schemas. MongoDB is developed by MongoDB Inc. and licensed under the Server Side Public License (SSPL). Context: https://www.mongodb.com/, https://www.mongodb.com/docs/, https://mongoplayground.net/, https://learn.mongodb.com/catalog, https://docs.aws.amazon.com/dynamodb/, https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html"
What is DocumentDBs_CouchDB_g?,"Apache CouchDB is an open-source document-oriented NoSQL database. It uses JSON to store data, JavaScript as its query language using MapReduce, and HTTP for an API. Unlike a relational database, a CouchDB database does not store data and relationships in tables. Instead, each database is a collection of independent documents. Each document maintains its own data and self-contained schema. Context: https://docs.couchdb.org/en/stable/, https://couchdb.apache.org/, https://kkovacs.eu/cassandra-vs-mongodb-vs-couchdb-vs-redis/, https://pouchdb.com/, https://app.daily.dev/tags/couchdb?ref=roadmapsh"
What is Real time?,"A real-time database is broadly defined as a data store designed to collect, process, and/or enrich an incoming series of data points (i.e., a data stream) in real time, typically immediately after the data is created. Example- FireBase_p, RethinkDB_g Context: https://www.google.com/search?q=realtime%20databases%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=realtime+databases+for+backend+developer, https://firebase.google.com/, https://rethinkdb.com/"
What is TimeSeries_infuxDB_p?,"InfluxDB was built from the ground up to be a purpose-built time series database; i.e., it was not repurposed to be time series. Time was built-in from the beginning. InfluxDB is part of a comprehensive platform that supports the collection, storage, monitoring, visualization and alerting of time series data. It’s much more than just a time series database. Context: https://www.influxdata.com/, https://www.influxdata.com/time-series-database/, https://app.daily.dev/tags/backend?ref=roadmapsh"
What is TimeSeries_TimeScale_g?,"TimescaleDB is an open-source time-series database built on top of PostgreSQL, designed for efficiently storing and querying time-series data. It introduces the concept of hypertables, which automatically partition data by time and space, making it ideal for high-volume data scenarios like monitoring, IoT, and financial analytics. TimescaleDB combines the power of relational databases with the performance of a specialized time-series solution, offering advanced features like continuous aggregates, real-time analytics, and seamless integration with PostgreSQL’s ecosystem. It’s a robust choice for developers looking to manage time-series data in scalable and efficient ways. Context: https://www.youtube.com/watch?v=69Tzh_0lHJ8, https://www.google.com/search?q=timescale%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=timescale+for+backend+developer"
What is ColumnDatabases_Cassandra?,"A wide-column database (sometimes referred to as a column database) is similar to a relational database. It store data in tables, rows and columns. However in opposite to relational databases here each row can have its own format of the columns. Column databases can be seen as a two-dimensional key-value database. One of such database system is Apache Cassandra. Context: https://cassandra.apache.org/_/index.html, https://www.youtube.com/watch?v=J-cSy5MeMOA, https://app.daily.dev/tags/backend?ref=roadmapsh"
What is Graph Database?,"A graph database stores nodes and relationships instead of tables, or documents. Data is stored just like you might sketch ideas on a whiteboard. Your data is stored without restricting it to a pre-defined model, allowing a very flexible way of thinking about and using it. Context: https://neo4j.com/docs/getting-started/get-started-with-neo4j/graph-database/, https://app.daily.dev/tags/backend?ref=roadmapsh, https://www.google.com/search?q=graph%20databases%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=graph+databases+for+backend+developer"
What is AWS Neptune?,"AWS Neptune is a fully managed graph database service designed for applications that require highly connected data. It supports two popular graph models: Property Graph and RDF (Resource Description Framework), allowing you to build applications that traverse billions of relationships with millisecond latency. Neptune is optimized for storing and querying graph data, making it ideal for use cases like social networks, recommendation engines, fraud detection, and knowledge graphs. It offers high availability, automatic backups, and multi-AZ (Availability Zone) replication, ensuring data durability and fault tolerance. Additionally, Neptune integrates seamlessly with other AWS services and supports open standards like Gremlin, SPARQL, and Apache TinkerPop, making it flexible and easy to integrate int  existing applications. Context: https://www.google.com/search?q=aws%20neptune%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=aws+neptune+for+backend+developer"
What is Intro?,"Speaking in general terms, scalability is the ability of a system to handle a growing amount of work by adding resources to it. A software that was conceived with a scalable architecture in mind, is a system that will support higher workloads without any fundamental changes to it, but don’t be fooled, this isn’t magic. You’ll only get so far with smart thinking without adding more sources to it. For a system to be scalable, there are certain things you must pay attention to, like: 1.Coupling 2.Observability 3.Evolvability 4.Infrastructure When you think about the infrastructure of a scalable system, you have two main ways of building it: using on-premises resources or leveraging all the tools a cloud provider can give you. The main difference between on-premises and cloud resources will be FLEXIBILITY, on cloud providers you don’t really need to plan ahead, you can upgrade your infrastructure with a couple of clicks, while with on-premises resources you will need a certain level of planning. Context: https://www.sentinelone.com/blog/scalable-architecture/, https://www.youtube.com/watch?v=gxfERVP18-g, https://www.google.com/search?q=building%20for%20scale%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=building+for+scale+for+backend+developer"
What is Migration Strategies?,"Learn how to run database migrations effectively. Especially zero downtime multi-phase schema migrations. Rather than make all changes at once, do smaller incremental changes to allow old code, and new code to work with the database at the same time, before removing old code, and finally removing the parts of the database schema which is no longer used. Context: https://phauer.com/2015/databases-challenge-continuous-delivery/, https://www.google.com/search?q=migration%20strategies%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=migration+strategies+for+backend+developer"
What is Migration_Strategies_Circuit_breaker?,"The circuit breaker design pattern is a way to protect a system from failures or excessive load by temporarily stopping certain operations if the system is deemed to be in a failed or overloaded state. It is commonly used in cloud computing environments to prevent cascading failures and to improve the resilience and availability of a system. A circuit breaker consists of three states: closed, open, and half-open. In the closed state, the circuit breaker allows operations to proceed as normal. If the system encounters a failure or becomes overloaded, the circuit breaker moves to the open state, and all subsequent operations are immediately stopped. After a specified period of time, the circuit breaker moves to the half-open state, and a small number of operations are allowed to proceed. If these operations are successful, the circuit breaker moves back to the closed state; if they fail, the circuit breaker moves back to the open state. The circuit breaker design pattern is useful for protecting a system from failures or excessive load by providing a way to temporarily stop certain operations and allow the system to recover. It is often used in conjunction with other design patterns, such as retries and fallbacks, to provide a more robust and resilient cloud environment Context: https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/rel_mitigate_interaction_failure_graceful_degradation.html, https://mateus4k.github.io/posts/circuit-breakers/"
What is Migration_Strategies_Load_Shifting?,"Load shifting is a design pattern that is used to manage the workload of a system by shifting the load to different components or resources at different times. It is commonly used in cloud computing environments to balance the workload of a system and to optimize the use of resources. There are several ways to implement load shifting in a cloud environment: Scheduling: This involves scheduling the execution of tasks or workloads to occur at specific times or intervals. Load balancing: This involves distributing the workload of a system across multiple resources, such as servers or containers, to ensure that the workload is balanced and that resources are used efficiently. Auto-scaling: This involves automatically adjusting the number of resources that are available to a system based on the workload, allowing the system to scale up or down as needed. Load shifting is an important aspect of cloud design, as it helps to ensure that resources are used efficiently and that the system remains stable and available. It is often used in conjunction with other design patterns, such as throttling and backpressure, to provide a scalable and resilient cloud environment. Context: https://www.google.com/search?q=load%20shifting%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=load+shifting+for+backend+developer"
What is Migration_Strategies_Back_pressure?,"Backpressure is a design pattern that is used to manage the flow of data through a system, particularly in situations where the rate of data production exceeds the rate of data consumption. It is commonly used in cloud computing environments to prevent overloading of resources and to ensure that data is processed in a timely and efficient manner.There are several ways to implement backpressure in a cloud environment: Buffering: This involves storing incoming data in a buffer until it can be processed, allowing the system to continue receiving data even if it is temporarily unable to process it. Batching: This involves grouping incoming data into batches and processing the batches in sequence, rather than processing each piece of data individually. Flow control: This involves using mechanisms such as flow control signals or windowing to regulate the rate at which data is transmitted between systems. Backpressure is an important aspect of cloud design, as it helps to ensure that data is processed efficiently and that the system remains stable and available. It is often used in conjunction with other design patterns, such as auto-scaling and load balancing, to provide a scalable and resilient cloud environment. Context: https://awesome-architecture.com/back-pressure/, https://www.google.com/search?q=backpressure%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=backpressure+for+backend+developer"
What is Migration_Strategies_Throttling?,"Throttling is a design pattern that is used to limit the rate at which a system or component can be used. It is commonly used in cloud computing environments to prevent overuse of resources, such as compute power, network bandwidth, or storage capacity. There are several ways to implement throttling in a cloud environment: Rate limiting: This involves setting a maximum number of requests that can be made to a system or component within a specified time period. Resource allocation: This involves allocating a fixed amount of resources to a system or component, and then limiting the use of those resources if they are exceeded. Token bucket: This involves using a “bucket” of tokens to represent the available resources, and then allowing a certain number of tokens to be “consumed” by each request. When the bucket is empty, additional requests are denied until more tokens become available. Throttling is an important aspect of cloud design, as it helps to ensure that resources are used efficiently and that the system remains stable and available. It is often used in conjunction with other design patterns, such as auto-scaling and load balancing, to provide a scalable and resilient cloud environment. Context: https://docs.aws.amazon.com/wellarchitected/2022-03-31/framework/rel_mitigate_interaction_failure_throttle_requests.html, https://www.google.com/search?q=throttling%20guide%20for%20backend%20developer, https://www.youtube.com/results?search_query=throttling+for+backend+developer"
What is Migration_Strategies_Graceful_Degradation?,"Graceful degradation is a design principle that states that a system should be designed to continue functioning, even if some of its components or features are not available. In the context of web development, graceful degradation refers to the ability of a web page or application to continue functioning, even if the user’s browser or device does not support certain features or technologies. Graceful degradation is often used as an alternative to progressive enhancement, a design principle that states that a system should be designed to take advantage of advanced features and technologies if they are available. Context: https://blog.hubspot.com/website/graceful-degradation, https://newrelic.com/blog/best-practices/design-software-for-graceful-degradation"
What is Types of Scaling?,"Horizontal scaling is a change in the number of a resource. For example, increasing the number of virtual machines processing messages in a queue. Vertical scaling is a change in the size/power of a resource. For example, increasing the memory or disk space available to a machine. Scaling can be applied to databases, cloud resources, and other areas of computing. Context: https://touchstonesecurity.com/horizontal-vs-vertical-scaling-what-you-need-to-know/, https://www.youtube.com/watch?v=xpDnVSmNFX0, https://www.youtube.com/watch?v=Y-Gl4HEyeUQ"
What is Observability?,"In software development, observability is the measure of how well we can understand a system from the work it does, and how to make it better. So what makes a system to be “observable”? It is its ability of producing and collecting metrics, logs and traces in order for us to understand what happens under the hood and identify issues and bottlenecks faster. You can of course implement all those features by yourself, but there are a lot of softwares out there that can help you with it like Datadog, Sentry and CloudWatch. Context: https://docs.datadoghq.com/, https://aws.amazon.com/cloudwatch/getting-started/, https://docs.sentry.io/, https://newrelic.com/blog/best-practices, https://www.youtube.com/watch?v=Wx0SHRb2xcI, https://app.daily.dev/tags/observability?ref=roadmapsh"
What is Intrumentation?,"Instrumentation refers to the measure of a product’s performance, in order to diagnose errors and to write trace information. Instrumentation can be of two types: source instrumentation and binary instrumentation. Backend monitoring allows the user to view the performance of infrastructure i.e. the components that run a web application. These include the HTTP server, middleware, database, third-party API services, and more. Telemetry is the process of continuously collecting data from different components of the application. This data helps engineering teams to troubleshoot issues across services and identify the root causes. In other words, telemetry data powers observability for your distributed applications. Context: https://en.wikipedia.org/wiki/Instrumentation_(computer_programming), https://www.yottaa.com/performance-monitoring-backend-vs-front-end-solutions/, https://www.sumologic.com/glossary/telemetry/, https://app.daily.dev/tags/monitoring?ref=roadmapsh"
What is Distributed Systems?," Distributed systems are hard to build, deploy and maintain. They consist of multiple components which communicate with each other. In parallel to that, users use the system, resulting in multiple requests. Making sense of this noise is important to understand: 1.how the system behaves 2.is it broken3.is it fast enough 4.what can be improved A product can integrate with existing monitoring products (APM - application performance management). They can show a detailed view of each request - its user, time, components involved, state(error or OK) etc. We can build dashboards with custom events or metrics according to our needs. Automatic alert rules can be configured on top of these events/metrics. A few popular tools are Grafana, Sentry, Mixpanel, NewRelic etc Context: https://www.dynatrace.com/news/blog/observability-vs-monitoring/, https://www.sumologic.com/blog/the-role-of-apm-and-distributed-tracing-in-observability/, https://thectoclub.com/tools/best-application-monitoring-software/, https://medium.com/@genchilu/cache-strategy-in-backend-d0baaacd2d79"
What is Basic Infrastructure knowledge_DevOps?,Roadmap Linked Context: https://roadmap.sh/devops?r=devops-beginner
What is Basic Infrastructure knowledge_fullstack?,Roadmap Linked Context: https://roadmap.sh/full-stack
What is Intro to Mathematics?,"Mathematics is the foundation of AI and Data Science. It is essential to have a good understanding of mathematics to excel in these fields. Context: https://www.coursera.org/learn/algebra-and-differential-calculus-for-data-science?irclickid=ylV21N3HFxyKTgqUdCxjyTb9UkC3j32vUXoTUU0&irgwc=1&utm_medium=partners&utm_source=impact&utm_campaign=4863057&utm_content=b2c#syllabus, https://www.coursera.org/specializations/mathematics-machine-learning?irclickid=ylV21N3HFxyKTgqUdCxjyTb9UkC3j32vUXoTUU0&irgwc=1&utm_medium=partners&utm_source=impact&utm_campaign=4863057&utm_content=b2c#courses"
"What is Learn Algebra, Calculus, Mathematical Analysis?","Attached sources and files Context: https://www.coursera.org/specializations/mathematics-machine-learning#courses, https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab, https://app.daily.dev/tags/math?ref=roadmapsh"
What is Differential Equation?,"A differential equation is an equation that relates one or more unknown functions and their derivatives. In other words, it's an equation that contains one or more terms and the derivatives of one variable with respect to another variable. Context: https://www.google.com/search?q=differential%20calculus%20guide%20for%20ai%20and%20data%20scientist, https://www.youtube.com/results?search_query=differential+calculus+for+ai+and+data+scientist, https://www.coursera.org/learn/algebra-and-differential-calculus-for-data-science#syllabus"
What is Introduction to Statistics?,"Statistics is the science of collecting, analyzing, interpreting, presenting, and organizing data. It is a branch of mathematics that deals with the collection, analysis, interpretation, presentation, and organization of data. It is used in a wide range of fields, including science, engineering, medicine, and social science. Statistics is used to make informed decisions, to predict future events, and to test hypotheses. It is also used to summarize data, to describe relationships between variables, and to make inferences about populations based on samples. Context: https://www.google.com/search?q=statistics%20guide%20for%20ai%20and%20data%20scientist, https://www.youtube.com/results?search_query=statistics+for+ai+and+data+scientist"
"What is Statistics, CLT?","The central limit theorem (CLT) states that the distribution of sample means approximates a normal distribution as the sample size gets larger, regardless of the population's distribution. Sample sizes equal to or greater than 30 are often considered sufficient for the CLT to hold. Context: https://www.google.com/search?q=statistics,%20clt%20guide%20for%20ai%20and%20data%20scientist, https://www.google.com/search?q=statistics,%20clt%20guide%20for%20ai%20and%20data%20scientist, https://www.youtube.com/results?search_query=statistics%2C+clt+for+ai+and+data+scientist"
What is Hypothesis Testing?,"Hypothesis testing, sometimes called significance testing, is an act in statistics whereby an analyst tests an assumption regarding a population parameter. Context: https://www.coursera.org/learn/statistical-analysis-hypothesis-testing-sas#syllabus, https://app.daily.dev/tags/testing?ref=roadmapsh, https://www.google.com/search?q=hypothesis%20testing%20guide%20for%20ai%20and%20data%20scientist"
What is Probability and Sampling?,"Hypothesis testing, sometimes called significance testing, is an act in statistics whereby an analyst tests an assumption regarding a population parameter. Context: https://www.coursera.org/learn/probability-statistics#syllabus, https://app.daily.dev/tags/statistics?ref=roadmapsh, https://www.google.com/search?q=probability%20and%20sampling%20guide%20for%20ai%20and%20data%20scientist, https://www.youtube.com/results?search_query=probability+and+sampling+for+ai+and+data+scientist"
What is AB testing?,"Refer to the context Context: https://vkteam.medium.com/practitioners-guide-to-statistical-tests-ed2d580ef04f#1e3b, https://towardsdatascience.com/step-by-step-for-planning-an-a-b-test-ef3c93143c0b, https://app.daily.dev/tags/ab-testing?ref=roadmapsh"
What is Increasing Test Sensitivity?,"Refer to context Context: https://www.researchgate.net/publication/305997925_Improving_the_Sensitivity_of_Online_Controlled_Experiments_Case_Studies_at_Netflix, https://splitmetrics.com/resources/minimum-detectable-effect-mde/, https://kdd.org/kdd2016/papers/files/adp0945-xieA.pdf, https://exp-platform.com/Documents/2013-02-CUPED-ImprovingSensitivityOfControlledExperiments.pdf, https://booking.ai/how-booking-com-increases-the-power-of-online-experiments-with-cuped-995d186fff1d, https://careers.doordash.com/blog/improving-experimental-power-through-control-using-predictions-as-covariate-cupac/"
What is Ratio Metrics?,"Refer to Context Context: https://arxiv.org/pdf/1803.06336, https://www.stat.cmu.edu/~hseltman/files/ratio.pdf, https://www.google.com/search?q=ratio%20metrics%20guide%20for%20ai%20and%20data%20scientist, https://www.youtube.com/results?search_query=ratio+metrics+for+ai+and+data+scientist"
What is Intro to Econometrics?,"Ecenometrics is the application of statistical methods to economic data. It is a branch of economics that aims to give empirical content to economic relations. More precisely, it is “the quantitative analysis of actual economic phenomena based on the concurrent development of theory and observation, related by appropriate methods of inference.” Econometrics can be described as something that allows economists “to sift through mountains of data to extract simple relationships.” Context: https://www.google.com/search?q=econometrics%20guide%20for%20ai%20and%20data%20scientist, https://www.youtube.com/results?search_query=econometrics+for+ai+and+data+scientist"
What is Econometrics Pre-requisites?,"refer to the context Context: https://bookdown.org/ts_robinson1994/10EconometricTheorems/, https://www.google.com/search?q=econometrics%20pre-requisites%20guide%20for%20ai%20and%20data%20scientist, https://www.youtube.com/results?search_query=econometrics+pre-requisites+for+ai+and+data+scientist"
"What is Regressions, Time series, Fitting Distributions?","Refer to the context Context: https://github.com/stalkermustang/bcdc_ds_takehome, https://bookdown.org/ts_robinson1994/10EconometricTheorems/, https://bookdown.org/ts_robinson1994/10EconometricTheorems/, https://www.academia.edu/33062577/Dougherty_Intro_to_Econometrics_4th_ed_small, https://www.coursera.org/learn/erasmus-econometrics#syllabus, https://www.kaggle.com/learn/time-series, https://www.kaggle.com/code/jagangupta/time-series-basics-exploring-traditional-ts#Hierarchical-time-series, https://machinelearningmastery.com/arima-for-time-series-forecasting-with-python/, https://machinelearningmastery.com/time-series-forecasting-methods-in-python-cheat-sheet/, https://www.coursera.org/learn/linear-regression-business-statistics#about"
What is Introduction to Coding?,"Programming is a fundamental skill for data scientists. You need to be able to write code to manipulate data, build models, and deploy solutions. The most common programming languages used in data science are Python and R. Python is a general-purpose programming language that is easy to learn and has a large number of libraries for data manipulation and machine learning. R is a programming language and free software environment for statistical computing and graphics. It is widely used for statistical analysis and data visualization. Context: https://www.google.com/search?q=coding%20guide%20for%20ai%20and%20data%20scientist, https://www.youtube.com/results?search_query=coding+for+ai+and+data+scientist"
What is Python?,"Learn Python Programming Language Context: https://www.kaggle.com/learn/python, https://developers.google.com/edu/python, https://app.daily.dev/tags/python?ref=roadmapsh"
What is Data Structures and Algorithms?,"check the context Context: https://leetcode.com/explore/learn/, https://leetcode.com/studyplan/, https://www.coursera.org/specializations/algorithms#courses"
What is Learn SQL?,"Refer to the context Context: https://www.sqltutorial.org/, https://app.daily.dev/tags/sql?ref=roadmapsh"
What is Introduction to the topic?,"Exploratory Data Analysis (EDA) is an approach to analyzing data sets to summarize their main characteristics, often with visual methods. EDA is used to understand what the data can tell us beyond the formal modeling or hypothesis testing task. It is a crucial step in the data analysis process. Context: https://www.google.com/search?q=exploratory%20data%20analysis%20guide%20for%20ai%20and%20data%20scientist, https://www.youtube.com/results?search_query=exploratory+data+analysis+for+ai+and+data+scientist"
What is Introduction to the topic?,"Machine learning is a field of artificial intelligence that uses statistical techniques to give computer systems the ability to “learn” (e.g., progressively improve performance on a specific task) from data, without being explicitly programmed. The name machine learning was coined in 1959 by Arthur Samuel. Evolved from the study of pattern recognition and computational learning theory in artificial intelligence, machine learning explores the study and construction of algorithms that can learn from and make predictions on data – such algorithms overcome following strictly static program instructions by making data-driven predictions or decisions, through building a model from sample inputs. Machine learning is employed in a range of computing tasks where designing and programming explicit algorithms with good performance is difficult or infeasible; example applications include email filtering, detection of network intruders, and computer vision. Context: https://www.google.com/search?q=machine%20learning%20guide%20for%20ai%20and%20data%20scientist, https://www.youtube.com/results?search_query=machine+learning+for+ai+and+data+scientist"
What is Introduction to the topic?,"Deep learning is a subset of machine learning that deals with algorithms inspired by the structure and function of the brain called artificial neural networks. Deep learning is a key technology behind driverless cars, enabling them to recognize a stop sign, or to distinguish a pedestrian from a lamppost. It is the key to voice control in consumer devices like phones, tablets, TVs, and hands-free speakers. Deep learning is getting lots of attention lately and for good reason. It’s achieving results that were not possible before. Context: https://www.google.com/search?q=%20guide%20for%20ai%20and%20data%20scientist, https://www.youtube.com/results?search_query=+for+ai+and+data+scientist"
What is Introduction to the topic?,"MLOps is a practice for collaboration and communication between data scientists and operations professionals to help manage production ML lifecycle. It is a set of best practices that aims to automate the ML lifecycle, including training, deployment, and monitoring. MLOps helps organizations to scale ML models and deliver business value faster. Context: https://www.google.com/search?q=mlops%20guide%20for%20ai%20and%20data%20scientist, https://www.youtube.com/results?search_query=mlops+for+ai+and+data+scientist"
"What is Python, Backend, DevOps?","Roadmap Linked Respectively Context: https://roadmap.sh/python, https://roadmap.sh/backend, https://roadmap.sh/devops"
Intro to internet,The Internet is a global network of computers connected to each other which communicate through a standardized set of protocols. Learn more here: https://cs.fyi/guide/how-does-internet-work
What is the internet?,The Internet is a global network of computers connected to each other which communicate through a standardized set of protocols. Learn more here: https://cs.fyi/guide/how-does-internet-work
Explain the internet,The Internet is a global network of computers connected to each other which communicate through a standardized set of protocols. Learn more here: https://cs.fyi/guide/how-does-internet-work
Intro to HTTP,HTTP is the TCP/IP based application layer communication protocol which standardizes how the client and server communicate with each other. It defines how the content is requested and transmitted across the internet. Learn more: https://cs.fyi/guide/http-in-depth
What is HTTP?,HTTP is the TCP/IP based application layer communication protocol which standardizes how the client and server communicate with each other. It defines how the content is requested and transmitted across the internet. Learn more: https://cs.fyi/guide/http-in-depth
Explain HTTP,HTTP is the TCP/IP based application layer communication protocol which standardizes how the client and server communicate with each other. It defines how the content is requested and transmitted across the internet. Learn more: https://cs.fyi/guide/http-in-depth
Intro to Domain Name,"A domain name is a unique, easy-to-remember address used to access websites, such as ‘google.com’, and ‘facebook.com’. Users can connect to websites using domain names thanks to the DNS system. Learn more: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_domain_name"
What is a domain name?,"A domain name is a unique, easy-to-remember address used to access websites, such as ‘google.com’, and ‘facebook.com’. Users can connect to websites using domain names thanks to the DNS system. Learn more: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_domain_name"
Explain domain name,"A domain name is a unique, easy-to-remember address used to access websites, such as ‘google.com’, and ‘facebook.com’. Users can connect to websites using domain names thanks to the DNS system. Learn more: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_domain_name"
Intro to Hosting,"Web hosting is an online service that allows you to publish your website files onto the internet. So, anyone who has access to the internet has access to your website. Learn more: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/Pages_sites_servers_and_search_engines"
What is web hosting?,"Web hosting is an online service that allows you to publish your website files onto the internet. So, anyone who has access to the internet has access to your website. Learn more: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/Pages_sites_servers_and_search_engines"
Explain web hosting,"Web hosting is an online service that allows you to publish your website files onto the internet. So, anyone who has access to the internet has access to your website. Learn more: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/Pages_sites_servers_and_search_engines"
Intro to DNS and How it works?,"The Domain Name System (DNS) is the phonebook of the Internet. Humans access information online through domain names, like nytimes.com or espn.com. Web browsers interact through Internet Protocol (IP) addresses. DNS translates domain names to IP addresses so browsers can load Internet resources. Learn more: https://www.cloudflare.com/en-gb/learning/dns/what-is-dns/"
What is DNS?,"The Domain Name System (DNS) is the phonebook of the Internet. Humans access information online through domain names, like nytimes.com or espn.com. Web browsers interact through Internet Protocol (IP) addresses. DNS translates domain names to IP addresses so browsers can load Internet resources. Learn more: https://www.cloudflare.com/en-gb/learning/dns/what-is-dns/"
Explain DNS,"The Domain Name System (DNS) is the phonebook of the Internet. Humans access information online through domain names, like nytimes.com or espn.com. Web browsers interact through Internet Protocol (IP) addresses. DNS translates domain names to IP addresses so browsers can load Internet resources. Learn more: https://www.cloudflare.com/en-gb/learning/dns/what-is-dns/"
Intro to Browsers and how they work,A web browser is a software application that enables a user to access and display web pages or other online content through its graphical user interface. Learn more: https://web.dev/articles/howbrowserswork
What is a browser?,A web browser is a software application that enables a user to access and display web pages or other online content through its graphical user interface. Learn more: https://web.dev/articles/howbrowserswork
Explain browser,A web browser is a software application that enables a user to access and display web pages or other online content through its graphical user interface. Learn more: https://web.dev/articles/howbrowserswork
Intro to Browsers and how they work,A web browser is a software application that enables a user to access and display web pages or other online content. More info: https://www.browserstack.com/guide/browser-rendering-engine
What is a browser?,A web browser is a software application that enables a user to access and display web pages or other online content. More info: https://www.browserstack.com/guide/browser-rendering-engine
Explain browser,A web browser is a software application that enables a user to access and display web pages or other online content. More info: https://www.browserstack.com/guide/browser-rendering-engine
Intro to HTML,HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage which you can style using CSS and make interactive using JavaScript. Learn more: https://www.w3schools.com/html/html_intro.asp
What is HTML?,HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage which you can style using CSS and make interactive using JavaScript. Learn more: https://www.w3schools.com/html/html_intro.asp
Explain HTML,HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage which you can style using CSS and make interactive using JavaScript. Learn more: https://www.w3schools.com/html/html_intro.asp
Intro to HTML,HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage. More info: https://www.youtube.com/watch?v=mJgBOIoGihA
What is HTML?,HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage. More info: https://www.youtube.com/watch?v=mJgBOIoGihA
Explain HTML,HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage. More info: https://www.youtube.com/watch?v=mJgBOIoGihA
Learn the Basics,HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage which you can style using CSS and make interactive using JavaScript. Learn more: https://www.w3schools.com/html/html_intro.asp
HTML Basics,HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage which you can style using CSS and make interactive using JavaScript. Learn more: https://www.w3schools.com/html/html_intro.asp
Basic HTML,HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage which you can style using CSS and make interactive using JavaScript. Learn more: https://www.w3schools.com/html/html_intro.asp
Learn the Basics,HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage. More info: https://web.dev/learn/html
HTML Basics,HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage. More info: https://web.dev/learn/html
Basic HTML,HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage. More info: https://web.dev/learn/html
Semantic HTML,"Semantic element clearly describes its meaning to both the browser and the developer. In HTML, semantic element are the type of elements that can be used to define different parts of a web page such as <form>, <table>, <article>, <header>, <footer>, etc. Learn more: https://cs.fyi/guide/writing-semantic-html"
What is Semantic HTML?,"Semantic element clearly describes its meaning to both the browser and the developer. In HTML, semantic element are the type of elements that can be used to define different parts of a web page such as <form>, <table>, <article>, <header>, <footer>, etc. Learn more: https://cs.fyi/guide/writing-semantic-html"
Explain Semantic HTML,"Semantic element clearly describes its meaning to both the browser and the developer. In HTML, semantic element are the type of elements that can be used to define different parts of a web page such as <form>, <table>, <article>, <header>, <footer>, etc. Learn more: https://cs.fyi/guide/writing-semantic-html"
Semantic HTML,Semantic element clearly describes its meaning to both the browser and the developer. More info: https://www.w3schools.com/html/html5_semantic_elements.asp
What is Semantic HTML?,Semantic element clearly describes its meaning to both the browser and the developer. More info: https://www.w3schools.com/html/html5_semantic_elements.asp
Explain Semantic HTML,Semantic element clearly describes its meaning to both the browser and the developer. More info: https://www.w3schools.com/html/html5_semantic_elements.asp
Forms and Validations,"Before submitting data to the server, it is important to ensure all required form controls are filled out, in the correct format. This is called client-side form validation, and helps ensure data submitted matches the requirements set forth in the various form controls. Learn more: https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation"
HTML Forms,"Before submitting data to the server, it is important to ensure all required form controls are filled out, in the correct format. This is called client-side form validation, and helps ensure data submitted matches the requirements set forth in the various form controls. Learn more: https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation"
Form Validation,"Before submitting data to the server, it is important to ensure all required form controls are filled out, in the correct format. This is called client-side form validation, and helps ensure data submitted matches the requirements set forth in the various form controls. Learn more: https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation"
Forms and Validations,"Before submitting data to the server, it is important to ensure all required form controls are filled out, in the correct format. More info: https://web.dev/learn/forms/"
HTML Forms,"Before submitting data to the server, it is important to ensure all required form controls are filled out, in the correct format. More info: https://web.dev/learn/forms/"
Form Validation,"Before submitting data to the server, it is important to ensure all required form controls are filled out, in the correct format. More info: https://web.dev/learn/forms/"
Accessibility,"Web accessibility means that websites, tools, and technologies are designed and developed in such a way that people with disabilities can use them easily. Learn more: https://www.w3.org/WAI/tips/developing/"
Web Accessibility,"Web accessibility means that websites, tools, and technologies are designed and developed in such a way that people with disabilities can use them easily. Learn more: https://www.w3.org/WAI/tips/developing/"
Explain Accessibility,"Web accessibility means that websites, tools, and technologies are designed and developed in such a way that people with disabilities can use them easily. Learn more: https://www.w3.org/WAI/tips/developing/"
Accessibility,"Web accessibility means that websites, tools, and technologies are designed and developed in such a way that people with disabilities can use them easily. More info: https://www.w3schools.com/accessibility/index.php"
Web Accessibility,"Web accessibility means that websites, tools, and technologies are designed and developed in such a way that people with disabilities can use them easily. More info: https://www.w3schools.com/accessibility/index.php"
Explain Accessibility,"Web accessibility means that websites, tools, and technologies are designed and developed in such a way that people with disabilities can use them easily. More info: https://www.w3schools.com/accessibility/index.php"
Basics of SEO,"SEO or Search Engine Optimization is the technique used to optimize your website for better rankings on search engines such as Google, Bing etc. Learn more: https://developers.google.com/search/docs"
What is SEO?,"SEO or Search Engine Optimization is the technique used to optimize your website for better rankings on search engines such as Google, Bing etc. Learn more: https://developers.google.com/search/docs"
Explain SEO,"SEO or Search Engine Optimization is the technique used to optimize your website for better rankings on search engines such as Google, Bing etc. Learn more: https://developers.google.com/search/docs"
Basics of SEO,SEO or Search Engine Optimization is the technique used to optimize your website for better rankings on search engines. More info: https://www.youtube.com/watch?v=xsVTqzratPs
What is SEO?,SEO or Search Engine Optimization is the technique used to optimize your website for better rankings on search engines. More info: https://www.youtube.com/watch?v=xsVTqzratPs
Explain SEO,SEO or Search Engine Optimization is the technique used to optimize your website for better rankings on search engines. More info: https://www.youtube.com/watch?v=xsVTqzratPs
Intro to CSS,"CSS or Cascading Style Sheets is the language used to style the frontend of any website. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. Learn more: https://www.w3schools.com/css/"
What is CSS?,"CSS or Cascading Style Sheets is the language used to style the frontend of any website. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. Learn more: https://www.w3schools.com/css/"
Explain CSS,"CSS or Cascading Style Sheets is the language used to style the frontend of any website. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. Learn more: https://www.w3schools.com/css/"
Intro to CSS,CSS or Cascading Style Sheets is the language used to style the frontend of any website. More info: https://web.dev/learn/css/
What is CSS?,CSS or Cascading Style Sheets is the language used to style the frontend of any website. More info: https://web.dev/learn/css/
Explain CSS,CSS or Cascading Style Sheets is the language used to style the frontend of any website. More info: https://web.dev/learn/css/
CSS BASICS,"CSS or Cascading Style Sheets is the language used to style the frontend of any website. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. Learn more: https://www.w3schools.com/css/"
What is CSS?,"CSS or Cascading Style Sheets is the language used to style the frontend of any website. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. Learn more: https://www.w3schools.com/css/"
Explain CSS,"CSS or Cascading Style Sheets is the language used to style the frontend of any website. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. Learn more: https://www.w3schools.com/css/"
CSS BASICS,"CSS or Cascading Style Sheets is the language used to style the frontend of any website. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. More info: https://web.dev/learn/css/"
What is CSS?,"CSS or Cascading Style Sheets is the language used to style the frontend of any website. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. More info: https://web.dev/learn/css/"
Explain CSS,"CSS or Cascading Style Sheets is the language used to style the frontend of any website. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. More info: https://web.dev/learn/css/"
Intro to Javascript,"JavaScript allows you to add interactivity to your pages. Common examples that you may have seen on the websites are sliders, click interactions, popups and so on. Learn more: https://roadmap.sh/javascript"
What is Javascript?,"JavaScript allows you to add interactivity to your pages. Common examples that you may have seen on the websites are sliders, click interactions, popups and so on. Learn more: https://roadmap.sh/javascript"
Explain Javascript,"JavaScript allows you to add interactivity to your pages. Common examples that you may have seen on the websites are sliders, click interactions, popups and so on. Learn more: https://roadmap.sh/javascript"
Intro to Javascript,"JavaScript allows you to add interactivity to your pages. Common examples that you may have seen on the websites are sliders, click interactions, popups and so on. More info: https://javascript.info/"
What is Javascript?,"JavaScript allows you to add interactivity to your pages. Common examples that you may have seen on the websites are sliders, click interactions, popups and so on. More info: https://javascript.info/"
Explain Javascript,"JavaScript allows you to add interactivity to your pages. Common examples that you may have seen on the websites are sliders, click interactions, popups and so on. More info: https://javascript.info/"
What is Vue.js g?,['Vue.js is an open-source JavaScript framework for building user interfaces and single-page applications. It is mainly focused on front end development.']
What is Angular?,"['Angular is a component based front-end development framework built on TypeScript which includes a collection of well-integrated libraries that include features like routing, forms management, client-server communication, and more.']"
What is Svelte g?,['Svelte is a javascript framework that unlike Vue and React does not use vertical DOM diffing but instead knows exactly what and where to update when the state changes. It’s mainly focused on frontend and building user interfaces.']
What is Solid JS g?,"['Solid is a reactive JavaScript toolkit for building user interfaces without a virtual DOM. To ensure that only the relevant code is executed when a state update occurs, it compiles templates down to real DOM nodes once and wraps modifications into fine-grained reactions.']"
What is Introduction?,"['The way we write CSS in our modern front-end applications is completely different from how we used to write CSS before. There are methods such as Styled Components, CSS Modules, Styled JSX, Emotion, etc']"
What is Tailwind?,"['CSS Framework that provides atomic CSS classes to help you style components e.g. flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.']"
What is Introduction to the CSS Architecture?,"['CSS is notoriously difficult to manage in large, complex, rapidly-iterated systems. There are different ways of writing CSS that allows in writing more maintainable CSS.']"
What is BEM?,"['The Block, Element, Modifier methodology (commonly referred to as BEM) is a popular naming convention for classes in HTML and CSS. Developed by the team at Yandex, its goal is to help developers better understand the relationship between the HTML and CSS in a given project.']"
What is Introduction?,"['CSS Preprocessors are scripting languages that extend the default capabilities of CSS. They enable us to use logic in our CSS code, such as variables, nesting, inheritance, mixins, functions, and mathematical operations.']"
What is Sass?,"['Sass is a preprocessor scripting language that is interpreted or compiled into Cascading Style Sheets. It lets you write maintainable CSS and provides features like variable, nesting, mixins, extension, functions, loops, conditionals and so on.']"
What is Post CSS?,"['PostCSS is a tool for transforming styles with JS plugins. These plugins can lint your CSS, support variables and mixins, transpile future CSS syntax, inline images, and more.']"
What is Introduction to the Build Tools?,"['Task runners automatically execute commands and carry out processes behind the scenes. This helps automate your workflow by performing mundane, repetitive tasks that you would otherwise waste an egregious amount of time repeating yourself. Common usages of task runners include numerous development tasks such as: spinning up development servers, compiling code (ex. SCSS to CSS), running linters, serving files up from a local port on your computer, and many more!']"
What is Introduction to Linter Formatters?,"['A linter is a tool used to analyze code and discover bugs, syntax errors, stylistic inconsistencies, and suspicious constructs. Popular linters for JavaScript include ESLint, JSLint, and JSHint.']"
What is Prettier?,"['Prettier is an opinionated code formatter with support for JavaScript, HTML, CSS, YAML, Markdown, GraphQL Schemas. By far the biggest reason for adopting Prettier is to stop all the on-going debates over styles.']"
What is ESLint?,['With ESLint you can impose the coding standard using a certain set of standalone rules.']
What is Intro to Module Bundler?,"['A module bundler is a tool that takes pieces of JavaScript and their dependencies and bundles them into a single file, usually for use in the browser. You may have used tools such as Browserify, Webpack, Rollup or one of many others. It usually starts with an entry file, and from there it bundles up all of the code needed for that entry file.']"
What is Vite?,['Vite is a build tool that aims to provide a faster and leaner development experience for modern web projects.']
What is SWC?,"['SWC (Speedy Web Compiler) is a JavaScript and TypeScript compiler and bundler built in Rust. Unlike Babel, which is JavaScript-based, SWC leverages Rust for blazing-fast performance, making it an ideal choice for large-scale projects. It focuses on speed while offering modern features like tree shaking, JSX transformation, and module bundling, catering to frontend development and build optimization.']"
What is Introduction to the topic?,"['Our current build tools for the web are 10-100x slower than they could be. The main goal of the esbuild bundler project is to bring about a new era of build tool performance, and create an easy-to-use modern bundler along the way.']"
What is Webpack?,"['Webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.']"
What is RollUp?,"['Rollup is a module bundler for JavaScript which compiles small pieces of code into something larger and more complex, such as a library or application.']"
What is Parcel?,"['Parcel is a web application bundler, differentiated by its developer experience. It offers blazing-fast performance utilizing multicore processing and requires zero configuration.']"
What is Testing your apps?,"['Before delivering your application to users, you need to be sure that your app meets the requirements it was designed for, and that it doesn’t do any weird, unintended things (called ‘bugs’). To accomplish this, we ‘test’ our applications in different ways.']"
What is Jest_g?,"['Jest is a delightful JavaScript Testing Framework with a focus on simplicity. It works with projects using: Babel, TypeScript, Node, React, Angular, Vue and more!']"
What is Vitest?,"['Vitest is a fast Vite-native unit test framework with out-of-box ESM, TypeScript and JSX support. Works on React, Vue, Svelte and more projects created with Vite']"
What is Introduction to the topic?,"['Authentication strategies are methods or techniques used to verify the identity of a user or system in order to grant access to a protected resource. There are several different authentication strategies that can be used, including: 1.Basic Authentication 2.Session Based Authentication 3.Token Based Authentication 4.JWT Authentication 5.OAuth 6.SSO You don’t necessarily need to learn all of these, how to implement and the ins and outs from the get go. But it’s important to know what they are and how they work. This will help you make better decisions when choosing an authentication strategy for your application.']"
What is Introduction to the topic?,['Web security refers to the protective measures taken by the developers to protect the web applications from threats that could affect the business.']
What is CORS?,"['Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources.']"
What is HTTPS?,"['HTTPS is a secure way to send data between a web server and a browser.Hypertext transfer protocol secure (HTTPS) is the secure version of HTTP, which is the primary protocol used to send data between a web browser and a website. HTTPS is encrypted in order to increase security of data transfer. This is particularly important when users transmit sensitive data, such as by logging into a bank account, email service, or health insurance provider']"
What are Content Security policies?,"['Content Security Policy is a computer security standard introduced to prevent cross-site scripting, clickjacking and other code injection attacks resulting from execution of malicious content in the trusted web page context.']"
What is Introduction?,"['OWASP or Open Web Application Security Project is an online community that produces freely-available articles, methodologies, documentation, tools, and technologies in the field of web application security.']"
What is Introduction?,['Web Components is a suite of different technologies allowing you to create reusable custom elements — with their functionality encapsulated away from the rest of your code — and utilize them in your web apps.']
What are HTML Templates?,['The <template> HTML element is a mechanism for holding HTML that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript. Think of a template as a content fragment that is being stored for subsequent use in the document.']
What are Custom Elements?,"['One of the key features of the Web Components standard is the ability to create custom elements that encapsulate your functionality on an HTML page, rather than having to make do with a long, nested batch of elements that together provide a custom page feature.']"
What is Shadow DOM?,"['An important aspect of web components is encapsulation — being able to keep the markup structure, style, and behavior hidden and separate from other code on the page so that different parts do not clash, and the code can be kept nice and clean. The Shadow DOM API is a key part of this, providing a way to attach a hidden separated DOM to an element.']"
What is Introduction?,"['Type checker helps developers write code with fewer bugs by adding types to their code, trying to catch type errors within your code, and then removing them during compile time. Flow and TypeScript are two popular static type checkers for JavaScript.']"
What is Typescript?,"['TypeScript is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale.']"
What is Server-side rendering?,"['Server-side rendering refers to the process that the service side completes the HTML structure splicing of the page, sends it to the browser, and then binds the status and events for it to become a fully interactive page.']"
What is React?,['React is the most popular front-end JavaScript library for building user interfaces. React can also render on the server using Node and power mobile apps using React Native.']
What is React_next.js?,['Next.js is an open-source development framework built on top of Node.js enabling React based web applications functionalities such as server-side rendering and generating static websites.']
What is React_Astro?,"['Astro is an all-in-one web framework for building fast, content-focused websites. Astro combines the power of a modern component-based framework with the performance and flexibility of a static site generator. 1.Component Islands: A new web architecture for building faster websites. 2.Server-first API design: Move expensive hydration off of your users’ devices. 3.Zero JS, by default: No JavaScript runtime overhead to slow you down. 4.Edge-ready: Deploy anywhere, even a global edge runtime like Deno or Cloudflare. 5.Customizable: Tailwind, MDX, and 100+ other integrations to choose from. 6.UI-agnostic: Supports React, Preact, Svelte, Vue, Solid, Lit and more.']"
What is React_React-router?,['There used to be Remix in this list but they announced to merge Remix into react-router after v7.']
What is Angular?,"['Angular is a component based front-end development framework built on TypeScript which includes a collection of well-integrated libraries that include features like routing, forms management, client-server communication, and more.']"
What is Vue.js?,['Vue.js is an open-source JavaScript framework for building user interfaces and single-page applications. It is mainly focused on front end development.']
What is Angular_Nuxt.js?,"['Nuxt.js is a free and open source JavaScript library based on Vue.js, Node.js, Webpack and Babel.js. Nuxt is inspired by Next.js, which is a framework of similar purpose, based on React.js.']"
What is Svelte?,['Svelte is a javascript framework that unlike Vue and React does not use vertical DOM diffing but instead knows exactly what and where to update when the state changes. It’s mainly focused on frontend and building user interfaces.']
What is Svelte_Sveltekit?,"['Svelte Kit is a framework for building web applications with the Svelte JavaScript framework. It is designed to be a complete solution for building web applications, with support for server-side rendering, automatic code splitting, and optimized performance.']"
What is Introduction to the topic?,"['GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.']"
What is Apollo_p?,"['Apollo is a platform for building a unified graph, a communication layer that helps you manage the flow of data between your application clients (such as web and native apps) and your back-end services.']"
What is Relay Modern_g?,['Relay is a JavaScript client used in the browser to fetch GraphQL data. It’s a JavaScript framework developed by Facebook for managing and fetching data in React applications. It is built with scalability in mind in order to power complex applications like Facebook. The ultimate goal of GraphQL and Relay is to deliver instant UI-response interactions.']
What is Introduction?,"['Progressive Web Apps (PWAs) are websites that are progressively enhanced to function like installed, native apps on supporting platforms, while functioning like regular websites on other browsers.']"
What is PRPL Model?,"['The PRPL pattern is a performance optimization pattern for web applications that focuses on minimizing the time it takes for the initial rendering of a web page. It stands for Push, Render, Pre-cache, and Lazy-load, and it involves the following steps: 1.Push: Prioritize the delivery of critical resources, such as HTML, CSS, and JavaScript, to the client as early as possible. 2.Render: Start rendering the web page as soon as the critical resources are received, even if some non-critical resources are still being downloaded. 3.Pre-cache: Pre-cache non-critical resources in the background so that they are available when needed. 4.Lazy-load: Defer the loading of non-critical resources until they are needed, such as when the user scrolls to them or interacts with them. The PRPL pattern is designed to improve the perceived performance of a web page by reducing the time it takes for the page to become interactive. It is particularly useful for applications that are served over slow or unreliable networks, as it allows the page to render as quickly as possible and then gradually load the remaining resources.']"
What is Rail Model?,"['The RAIL model is a performance optimization model for web applications that focuses on improving the perceived performance of a web page. It stands for Response, Animation, Idle, and Load, and it involves the following four performance goals: 1.Response: The time it takes for the web page to respond to user input should be under 100 milliseconds. 2.Animation: The time it takes for an animation to run should be under 10 milliseconds. 3.Idle: The web page should take advantage of idle time to perform non-critical tasks. 4.Load: The time it takes for the web page to fully load should be under 1 second. The RAIL model is designed to provide a framework for optimizing the performance of a web page by focusing on the four key areas that impact the user’s perception of performance. It is particularly useful for applications that require high levels of interactivity, such as games and social media applications.']"
What are Performance Metrics?,"['Web performance metrics are quantitative measures of the performance of a web page or application. They are used to assess the speed and efficiency of a web page, and they can help identify areas for improvement. Some common web performance metrics include: 1.Load time: The time it takes for a web page to fully load and become interactive. 2.First contentful paint (FCP): The time it takes for the first content to appear on the page. 3.Time to interactive (TTI): The time it takes for the page to become fully interactive. 4.First input delay (FID): The time it takes for the page to respond to the first user input. 5.Total blocking time (TBT): The time it takes for the page to become fully interactive, taking into account the time spent blocking the main thread. There are many tools and techniques available for measuring web performance metrics, including browser dev tools, performance monitoring tools, and web performance APIs. By tracking these metrics and analyzing the results, web developers can identify areas for improvement and optimize the performance of their web pages.']"
What is Using Lighthouse?,"['Lighthouse is an open-source tool developed by Google that is used to audit the performance, accessibility, and SEO of web pages. It is available as a browser extension and as a command-line tool, and it can be run on any web page to generate a report with recommendations for improvement. Lighthouse works by simulating the load and interaction of a web page and measuring various performance metrics, such as load time, time to first paint, and time to interactive. It also checks for common issues such as incorrect image sizes, missing alt text, and broken links. Lighthouse provides a comprehensive and easy-to-use tool for identifying and fixing performance and accessibility issues on web pages. It is widely used by web developers and is integrated into many popular development tools.']"
What is Using DEV Tools?,"['Most of the browsers have built-in developer tools that help you perform web development specific tasks on a webpage. My personal recommendation would be to use Chrome DevTools as it is the most advanced and has the most features. However, if you are using a different browser, you can still use the DevTools to debug your web application. Chrome DevTools is a set of web development tools built into the Google Chrome browser. It allows web developers to debug and optimize web pages by providing a range of features for inspecting and manipulating the page’s HTML, CSS, and JavaScript. Some of the features provided by Chrome DevTools include: 1.Elements panel: Inspect and modify the page’s HTML and CSS. 2.Console panel: View and debug JavaScript errors and log messages. 3.Network panel: Monitor network requests and responses, and analyze performance issues. 4.Performance panel: Analyze the performance of the page and identify bottlenecks. 5.Application panel: Inspect the page’s resources, such as cookies and local storage. Chrome DevTools is a powerful and essential tool for web developers, and it is widely used to debug and optimize web pages. It is constantly updated with new features and improvements, and it is available on all modern web browsers.']"
What is a static site generator?,"['A static site generator is a tool that generates a full static HTML website based on raw data and a set of templates. Essentially, a static site generator automates the task of coding individual HTML pages and gets those pages ready to serve to users ahead of time. Because these HTML pages are pre-built, they can load very quickly in users’ browsers.']"
What is Next.js?,['Next.js is an open-source development framework built on top of Node.js enabling React based web applications functionalities such as server-side rendering and generating static websites.']
What is Astro_p?,"['Astro is an all-in-one web framework for building fast, content-focused websites. Astro combines the power of a modern component-based framework with the performance and flexibility of a static site generator. 1.Component Islands: A new web architecture for building faster websites. 2.Server-first API design: Move expensive hydration off of your users’ devices. 3.Zero JS, by default: No JavaScript runtime overhead to slow you down. 4.Edge-ready: Deploy anywhere, even a global edge runtime like Deno or Cloudflare. 5.Customizable: Tailwind, MDX, and 100+ other integrations to choose from. 6.UI-agnostic: Supports React, Preact, Svelte, Vue, Solid, Lit and more.']"
What is Vuepress?,"['VuePress is composed of two parts: a minimalistic static site generator (opens new window)with a Vue-powered theming system and Plugin API, and a default theme optimized for writing technical documentation. It was created to support the documentation needs of Vue’s own sub projects.']"
What is Eleventy?,"['Eleventy (11ty) is a simple to use, easy to customize, highly performant and powerful static site generator with a helpful set of plugins (e.g. navigation, build-time image transformations, cache assets). Pages can be built and written with a variety of template languages (HTML, Markdown, JavaScript, Liquid, Nunjucks, Handlebars, Mustache, EJS, Haml, Pug or JS template literals). But it also offers the possibility to dynamically create pages from local data or external sources that are compiled at build time. It has zero client-side JavaScript dependencies.']"
What is Nuxt.js?,['Nuxt.js is an open-source development framework built on top of Node.js enabling Vue based web applications functionalities such as server-side rendering and generating static websites.']
What is Introduction to the topic?,"['A while back, developing a mobile app using JavaScript was impossible. But now JavaScript developers can create mobile applications using their knowledge for web development. Here is the list of options to create mobile applications in JavaScript.']"
What is Ionic?,"['Ionic framework is an open-source UI toolkit for building performant, high-quality mobile apps, desktop apps, and progressive web apps using web technologies such as HTML, CSS, and JavaScript.']"
What is React Native?,['React Native is a popular JavaScript-based mobile app framework that allows you to build natively-rendered mobile apps for iOS and Android. The framework lets you create an application for various platforms by using the same codebase.']
What is Flutter?,"['Flutter is a free and open-source mobile UI framework created by Google and released in May 2017. In a few words, it allows you to create a native mobile application with only one codebase. This means that you can use one programming language and one codebase to create two different apps (for iOS and Android). Flutter consists of two important parts: An SDK (Software Development Kit): A collection of tools that are going to help you develop your applications. This includes tools to compile your code into native machine code (code for iOS and Android). A Framework (UI Library based on widgets): A collection of reusable UI elements (buttons, text inputs, sliders, and so on) that you can personalize for your own needs. To develop with Flutter, you will use a programming language called Dart. The language was created by Google in October 2011, but it has improved a lot over these past years. Dart focuses on front-end development, and you can use it to create mobile and web applications. If you know a bit of programming, Dart is a typed object programming language. You can compare Dart’s syntax to JavaScript.']"
What are Desktop Applications in JavaScript?,"['A while back, developing a desktop app using JavaScript was impossible. But now JavaScript developers can create desktop applications using their knowledge for web development. Here is the list of options to create desktop applications in JavaScript.']"
What is Electron?,"['Electron allows you to build cross-platform desktop applications with HTML, CSS, and Javascript/Typescript. It uses Chromium and Node.js, so essentially it is a “Browser” like application that is compatible with Mac, Windows, and Linux.']"
What is Tauri?,"['Tauri is a toolkit that helps developers make applications for the major desktop platforms - using virtually any frontend framework in existence. The core is built with Rust, and the CLI leverages Node.js making Tauri a genuinely polyglot approach to creating and maintaining great apps.']"
What is Flutter?,"['Flutter is a free and open-source mobile UI framework created by Google and released in May 2017. In a few words, it allows you to create a native mobile application with only one codebase. This means that you can use one programming language and one codebase to create two different apps (for iOS and Android). Flutter consists of two important parts: An SDK (Software Development Kit): A collection of tools that are going to help you develop your applications. This includes tools to compile your code into native machine code (code for iOS and Android). A Framework (UI Library based on widgets): A collection of reusable UI elements (buttons, text inputs, sliders, and so on) that you can personalize for your own needs. To develop with Flutter, you will use a programming language called Dart. The language was created by Google in October 2011, but it has improved a lot over these past years. Dart focuses on front-end development, and you can use it to create mobile and web applications. If you know a bit of programming, Dart is a typed object programming language. You can compare Dart’s syntax to JavaScript.']"
Where do I learn TypeScript?,['Roadmap Linked: https://roadmap.sh/typescript']
Where do I learn Node.js?,['Roadmap Linked: https://roadmap.sh/nodejs']
Where do I learn full-stack?,['Roadmap Linked: https://roadmap.sh/full-stack']
What is Kotlin?,"Kotlin is a cross-platform, statically typed general-purpose programming language with type inference. Developed by JetBrains, the makers of the world’s leading IDEs, Kotlin has a syntax, which is more expressive and concise. This allows for more readable and maintainable code. It is fully interoperable with Java and comes with no limitations. It can be used almost everywhere Java is used today, for server-side development, Android apps, and much more. Kotlin introduces several improvements for programmers over Java, which makes it a preferred choice for many developers. With more concise code base and modern programming concept support - it’s certainly a future of Android app development. Context: https://www.w3schools.com/kotlin/, https://www.youtube.com/watch?v=EExSSotojVI, https://app.daily.dev/tags/kotlin?ref=roadmapsh"
What is Java?,"Java is a popular programming language used for Android development due to its robustness and ease of use. Its object-oriented structure allows developers to create modular programs and reusable code. The language was built with the philosophy of “write once, run anywhere” (WORA), meaning compiled Java code can run on all platforms without the need for recompilation. Android’s API and core libraries are primarily written in Java, therefore understanding Java is fundamental in creating diverse and powerful Android apps. Java is a statically-typed language, which can be beneficial for detecting errors at compile-time rather than at runtime. Oracle, who owns Java, provides comprehensive documentation and support for the language. Context: "
What is Development IDE?,"“Development IDE” refers to Development Integrated Development Environment that is vital for Android App development. For Android, the primary IDE is Android Studio. This official IDE from Google includes everything you need to build an Android app, such as a code editor, code analysis tools, emulators for all of Android’s supported OS versions and hardware configurations, and more. Other popular IDEs include Eclipse (with an Android Developer Tools plugin), NetBeans, and IntelliJ IDEA. Each of these IDEs tends to have its own set of specialized features, but all are designed to provide the tools and services needed for Android development. The choice of IDE often depends on the specific needs and preferences of the developer or development team. Context: "
What is Basics of Kotlin?,"Kotlin is a statically-typed programming language that runs on the Java Virtual Machine (JVM) and can be used to develop all types of Android apps. It is Google’s preferred language for Android app development. Kotlin’s syntax is more concise than Java, which means less code to write and read, and fewer opportunities for errors. It provides several high-level features like lambdas, coroutines and higher order functions that help making the code more clean and understandable. Key basics of Kotlin include control flow statements (if, when, for, while), variables (mutable and non-mutable), null safety, classes and objects, inheritance, interfaces, and exception handling. While learning Kotlin, experience with Java will certainly be helpful, but it’s not a prerequisite. Context: "
What is Basics of OOP?,"In Android development, understanding the Basics of Object-Oriented Programming (OOP) is crucial. OOP is a programming paradigm that uses “Objects” - entities that contain both data and functions that manipulate the data. Key concepts include Classes, which are blueprints from which objects are created; Objects, instances of a class; Inheritance, where one class acquires properties from another; Polymorphism, the ability of an object to take many forms; Abstraction, showing only necessary details and hiding implementation from the user; and Encapsulation, the concept of wrapping data and the methods that work on data within one unit. By understanding these fundamentals, you can create more efficient and effective Android apps. Context: "
What is DataStructures and Algorithms?,"In Android, data structures are primarily used to collect, organize and perform operations on the stored data more effectively. They are essential for designing advanced-level Android applications. Examples include Array, Linked List, Stack, Queue, Hash Map, and Tree. Meanwhile, algorithms are a sequence of instructions or rules for performing a particular task. In Android, algorithms can be used for data searching, sorting, or performing complex business logic. Some commonly used algorithms are Binary Search, Bubble Sort, Selection Sort, etc. A deep understanding of data structures and algorithms is crucial in optimizing the performance and the memory consumption of the Android applications. Context: "
What is What is and How to use Gradle??,"Using Gradle: Gradle is a powerful build system used in Android development that allows you to define your project and dependencies, and distinguish between different build types and flavors. Gradle uses a domain-specific language (DSL) which gives developers almost complete control over the build process. When you trigger a build in Android Studio, Gradle is the tool working behind the scenes to compile and package your app. It looks at the dependencies you declared in your build.gradle files and create a build script accordingly. Using Gradle in Android development requires continuous editing of the build.gradle files to manage app dependencies, build variants, signing configurations, and other essential aspects related to building your app. Context: https://assets.tomgregory.com/get-going-with-gradle/get-going-with-gradle-book.pdf, https://www.youtube.com/watch?v=-dtcEMLNmn0, https://www.youtube.com/watch?v=R6Z-Sxb837I, https://app.daily.dev/tags/gradle?ref=roadmapsh"
What is Create a basic Hello World App?,"The “Hello World” app is a simple project that you can build when you’re getting started with Android development. It’s often the first program that beginners learn to build in a new system. It’s usually considered the simplest form of program that displays a message to the user - “Hello, World!” In Android, this involves creating a new project from the Android Studio and setting up the main activity. The main activity file is primarily written in Java or Kotlin where you can code for the display message, while the layout design view can be created in the XML file. Context: https://developer.android.com/codelabs/basic-android-kotlin-compose-first-app"
What is Intro?,"Version Control is a system that records changes to a file or set of files over time so that you can recall specific versions later. An essential tool for software development, it helps to track changes, enhance collaboration, and manage different versions of a project. Two common types of version control systems are Centralized Version Control System (CVCS) and Distributed Version Control System (DVCS). CVCS uses a central server to store all versions of a project, with users getting snapshots from that server. Examples include SVN and Perforce. On the other hand, DVCS allows multiple developers to work on a single project simultaneously. Each user has a complete backup of all versions of the work. Examples include Git and Mercurial. Context: "
What is Git?,"Git is a highly efficient and flexible distributed version control system that was created by Linus Torvalds, the creator of Linux. It allows multiple developers to work on a project concurrently, providing tools for non-linear development and tracking changes in any set of files. Git has a local repository with a complete history and version-tracking capabilities, allowing offline operations, unlike SVN. It ensures data integrity and provides strong support for non-linear development with features such as branching and merging. Yet, Git has a high learning curve and can be complex for beginners to understand the command line interface. Furthermore, Git also allows you to create tags to reference certain points in your history for milestone or version releases. Context: "
What is GitHub?,"GitHub is a cloud-based hosting service for managing software version control using Git. It provides a platform for enabling multiple developers to work together on the same project at the same time. With GitHub, codes can be stored publicly, allowing for collaboration with other developers or privately for individual projects. Key features of GitHub include code sharing, task management, and version control, among others. GitHub also offers functionalities such as bug tracking, feature requests, and task management for the project. For Android development, it supports Gradle-based android projects, plugins for Android Studio and JetBrains IntelliJ IDEA, making version control operations more user-friendly. Context: "
What is BitBucket?,"Bitbucket is a web-based hosting service that is owned by Atlassian. Bitbucket uses either Mercurial or Git revision control systems, allowing users to manage and maintain their code. This platform is mainly used for code and code review. Bitbucket provides both commercial plans and free accounts. It offers free accounts with an unlimited number of private repositories (which can have up to five users in the case of free accounts) as of September 2010. It originally offered only Mercurial support. Bitbucket integrates with other Atlassian software like JIRA, HipChat, Confluence and Bamboo. Context: "
What is GitLab?,"Gitlab is a web-based DevOps lifecycle tool which provides a Git-repository manager, along with continuous integration and deployment pipeline features, using an open-source license, developed by GitLab Inc. Users can manage and create their software projects and repositories, and collaborate on these projects with other members. Gitlab also allows users to view analytics and open issues of their project. It stands next to other version control tools like GitHub and Bitbucket, but comes with its own set of additional features and nuances. For Android development, Gitlab can be particularly useful owing to its continuous integration and deployment system which can automate large parts of the app testing and deployment. Context: "
What is Intro?,"Android apps are primarily made up of five different types of components: Activities: These are individual screens that a user can interact with. Any UI action like touching a button or swiping a screen will usually take place within an activity. Services: Unlike activities, services run in the background and don’t have a user interface. They’re used for repetitive or long running operations, like playing music or pulling in a feed of data from a server. Broadcast Receivers: These are event listeners. The Android operating system uses them to respond to system-wide events. Content Providers: They manage and share app data with other apps installed on the device. For security, data is not generally shared across apps. Intents: These serve as messages or commands to the Android system. They’re used to signal to the Android system that certain events have occurred. Each app component is designed to serve different purposes and to have a well-defined lifecycle which defines how the component is created and destroyed Context: "
What is Intro to HTML?,"HTML stands for HyperText Markup Language. It is used on the frontend and gives the structure to the webpage which you can style using CSS and make interactive using JavaScript. Context: https://www.w3schools.com/html/html_intro.asp, https://www.youtube.com/watch?v=mJgBOIoGihA, https://www.youtube.com/watch?v=pQN-pnXPaVg, https://app.daily.dev/tags/html?ref=roadmapsh"
What is Intro to CSS?,"CSS or Cascading Style Sheets is the language used to style the frontend of any website. CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript. Context: https://www.w3schools.com/css/, https://web.dev/learn/css/, https://www.youtube.com/watch?v=n4R2E7O-Ngo, https://www.youtube.com/watch?v=D-h8L5hgW-w, https://app.daily.dev/tags/css?ref=roadmapsh"
"What is Now that you have learnt HTML and CSS, you should be able to build static webpages. I recommend you to build as many test projects at each yellow step of the roadmap as possible to solidify what you learn?","The practice that I used to follow when I was learning was this: While you are watching a course or reading a book, make sure to code along with the instructor/author — pause the video at regular intervals and code what you are being taught. Search on YouTube and watch a few project based tutorials on the topic that you are learning. Apart from coding along with the instructor:Try to build the same project at least 2 to 3 times on your own without looking at the video. If you get stuck, refer to the section of the video where the instructor builds that part of the project. Build something else that is similar to the project that you just built. For example, if you just built a todo app, try to build a notes app or a reminder app. Context: 1. https://www.figma.com/design/nh0V05z3NB87ue9v5PcO3R/writings.dev?node-id=0-1&node-type=CANVAS, 2. https://cs.fyi/, 3. https://astro.build/showcase/"
What is Intro to JavaScript?,"JavaScript allows you to add interactivity to your pages. Common examples that you may have seen on the websites are sliders, click interactions, popups and so on. Context: https://roadmap.sh/javascript, https://javascript.info/, https://javascript30.com/, https://www.youtube.com/watch?v=hdI2bqOjy3c&t=2s, https://app.daily.dev/tags/javascript?ref=roadmapsh"
What is At this point you should be able to add interactivity to your web pages using JavaScript.?,"You should make sure that you have learnt the following: Know about variables, loops, data types, conditionals, functions. Know about arrays and objects and different ways to access their data. Know how to select DOM elements. Add event listeners to DOM elements (e.g. click, focus, form submission). Use JavaScript to add and remove DOM elements. Add and remove classes from DOM elements Use JavaScript to make HTTP requests to external APIs (i.e. fetch).  Use JavaScript to store data in the browser’s local storage Here are few ideas to practice your skills: Create a simple to-do list app that allows users to search, add, edit, and delete items. Use local storage to store the data. Create a simple webpage where user can put in anyone’s GitHub username and see their profile information. You can use GitHub’s API to fetch the data. For example, here is the sample URL to fetch my data. Make sure to add validation and error handling. Create a basic calculator app that allows users to perform basic arithmetic operations. Context: "
What is Intro to npm?,"npm is a package manager for the JavaScript programming language maintained by npm, Inc. npm is the default package manager for the JavaScript runtime environment Node.js. Context: https://github.com/workshopper/how-to-npm, https://peterxjang.com/blog/modern-javascript-explained-for-dinosaurs.html, https://nodesource.com/blog/an-absolute-beginners-guide-to-using-npm/, https://www.youtube.com/watch?v=2V1UUhBJ62Y, https://www.youtube.com/watch?v=jHDhaSSKmB0, https://app.daily.dev/tags/npm?ref=roadmapsh"
"What is At this point, you should be able to install and use external packages using npm.?","You probably know about npmjs.com[1] where you can search for packages and read their documentation. You should also be familiar with the package.json file and how to use it to manage your project dependencies. You don’t need to get into the module bundlers and build tools just yet. Just make sure that you are able to use the dependencies installed in the node_modules folder using simple link and script tags in your HTML. Regarding projects, here are a few ideas that you can try: Create a simple webpage that shows the current time of user. You can use dayjs[2] to get the current time and display it on the page. Here is the sample design for homepage.[3] Install the micromodal[4] library. Create a button on the page clicking which should open a modal and let the user select a timezone from a dropdown. Once the user selects a timezone, the modal should close and the time on the page should be updated to show the time in the selected timezone. Here is the sample design for the modal.[5] Context: 1. https://www.npmjs.com/, 2. https://day.js.org/, 3. https://imgur.com/yGIMGkr, 4. https://micromodal.vercel.app/#introduction, 5. https://imgur.com/a/vFY6Sdl"
What is Intro to Git?,"Git[1] is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Context: 1. https://git-scm.com/, https://www.atlassian.com/git, https://cs.fyi/guide/git-cheatsheet, https://www.youtube.com/watch?v=SWYqp7iY_Tc, https://www.youtube.com/watch?v=mJ-qvsxPHpY, https://app.daily.dev/tags/git?ref=roadmapsh"
What is Intro to GitHub?,"GitHub is a provider of Internet hosting for software development and version control using Git. It offers the distributed version control and source code management functionality of Git, plus its own features. Context: https://github.com/, https://docs.github.com/en/get-started/start-your-journey, https://ooloo.io/project/github-flow, https://www.youtube.com/watch?v=w3jLJU7DT5E, https://www.youtube.com/watch?v=wpISo9TNjfU, https://www.youtube.com/watch?v=RGOj5yH7evk, https://www.youtube.com/watch?v=eulnSXkhE7I, https://app.daily.dev/tags/github?ref=roadmapsh"
What is Now that you have learnt git and GitHub you should be ready to work with others. You should now setup your GitHub profile and push all the projects that you have built so far to your GitHub profile.?,Keep the repository names lowercase and use hyphens to separate words e.g. todo-app instead of TodoApp or Todo-App. Add a README.md file to each repository that you create. This file should contain a description of the project. Put some effort into the readme and make sure it clearly details what the project is about and how anyone can run it locally. Add snapshots of your project to the readme file so that anyone can see what the project looks like without having to run it locally. Add a LICENSE file to each repository that you create. This file should contain the license that you want to use for the project. You can use choosealicense.com[1] to help you choose a license. Context: 1. https://choosealicense.com/
What is Intro to Tailwind CSS?,"CSS Framework that provides atomic CSS classes to help you style components e.g. flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup. Context: https://tailwindcss.com/, https://www.youtube.com/watch?v=lCxcTsOHrjo, https://www.youtube.com/watch?v=UBOj6rqRUME, https://www.youtube.com/watch?v=hdGsFpZ0J2E, https://www.youtube.com/c/TailwindLabs/videos, https://app.daily.dev/tags/tailwind-css?ref=roadmapsh"
What is Intro to React?,"React is the most popular front-end JavaScript library for building user interfaces. React can also render on the server using Node and power mobile apps using React Native. Context: https://roadmap.sh/react, https://react.dev/, https://react.dev/learn/tutorial-tic-tac-toe, https://www.youtube.com/watch?v=nTeuhbP7wdE, https://www.youtube.com/watch?v=bMknfKXIFA8, https://www.youtube.com/watch?v=i793Qm6kv3U, https://app.daily.dev/tags/react?ref=roadmapsh"
What is At this point you should be able to build a complete frontend application including: Structuring your webpages with HTML - Styling your webpages with CSS - Adding interactivity to your webpages with JavaScript - Using the DOM API to manipulate your webpages - Using the Fetch API to make HTTP requests - Understand promises and use async/await syntax to write asynchronous code - Installing and using external libraries with npm - Version controlling your code with Git - Pushing your code to GitHub?, Context: 
What is Intro to Node.js?,"Node.js is an open-source and cross-platform JavaScript runtime environment. It is a popular tool for almost any kind of project! Node.js runs the V8 JavaScript engine, Google Chrome’s core, outside the browser. This allows Node.js to be very performant. A Node.js app runs in a single process, without creating a new thread for every request. Node.js provides a set of asynchronous I/O primitives in its standard library that prevent JavaScript code from blocking and generally, libraries in Node.js are written using non-blocking paradigms, making blocking behavior the exception rather than the norm. Context: https://nodejs.org/en/about/, https://nodejs.org/en/learn/getting-started/introduction-to-nodejs, https://www.w3schools.com/nodejs/nodejs_intro.asp, https://www.youtube.com/watch?v=Oe421EPjeBE, https://app.daily.dev/tags/nodejs?ref=roadmapsh"
What is You should be able to build a CLI application that can: - Read and write files - Parse command line arguments - Make HTTP requests - Parse JSON - Use a third-party library (e.g. a library for parsing CSV files) - Use a third-party API?,"Here are some ideas for CLI applications you can build: Create a CLI application that takes a URL and a CSS selector arguments and prints the text content of the element that matches the selector. Hint you can use cheerio[1]. An application that optionally takes two dates and prints the most starred GitHub projects in that date range. Hint you can use GitHub’s search API[2]. Bulk rename files in a directory. Hint you can use fs[3] and path[4]. Write a CLI application that takes a path as input and compresses all the images in that directory. It should accept an option for output path; if the output path is not given it should compress images in place otherwise write the compressed images to the output path. Hint you can use sharp[5]. Context: 1. https://github.com/cheeriojs/cheerio, 2. https://docs.github.com/en/rest/search?apiVersion=2022-11-28#search-repositories, 3. https://nodejs.org/api/fs.html, 4. https://nodejs.org/api/path.html, 5. https://github.com/lovell/sharp"
What is Intro to PostgreSQL?,"PostgreSQL, also known as Postgres, is a free and open-source relational database management system emphasizing extensibility and SQL compliance. Context: https://roadmap.sh/postgresql-dba, https://www.postgresql.org/, https://www.postgresqltutorial.com/, https://www.youtube.com/watch?v=qw--VYLpxG4, https://www.youtube.com/watch?v=eMIxuk0nOkU, https://app.daily.dev/tags/postgresql?ref=roadmapsh"
What is Intro to CRUD?,"CRUD stands for Create, Read, Update, and Delete. These are the four basic operations you can perform on any data when working with web applications, databases, and APIs. Now that you know about programming language and the databases, you should be able to build a simple CLI application that interacts with database. We haven’t talked about the APIs yet but you don’t need an API to practice CRUD operations. Here are some of the CLI applications you can build to practice CRUD operations:  A simple todo list application for the CLI with the following options: --new to add a new todo item --list [all|pending|done] to list the todo items --done [id] to update a todo item --delete [id] to delete a todo item --help to list all the available options --version to print the version of the application Context: "
What is Intro to REST?,"REST, or REpresentational State Transfer, is an architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other. Context: https://www.redhat.com/en/topics/api/what-is-a-rest-api, https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm, https://restapitutorial.com/"
What is Intro to JWT?,"WT stands for JSON Web Token is a token-based encryption open standard/methodology that is used to transfer information securely as a JSON object. Clients and Servers use JWT to securely share information, with the JWT containing encoded JSON objects and claims. JWT tokens are designed to be compact, safe to use within URLs, and ideal for SSO contexts. Context: https://jwt.io/, https://jwt.io/introduction, https://www.akana.com/blog/what-is-jwt, https://www.youtube.com/watch?v=7Q17ubqLfaM, https://www.youtube.com/watch?v=926mknSW9Lo, https://www.youtube.com/watch?v=mbsmsi7l3r4, https://app.daily.dev/tags/jwt?ref=roadmapsh"
What is Intro to Redis?,"Redis is an open source (BSD licensed), in-memory data structure store used as a database, cache, message broker, and streaming engine. Redis provides data structures such as strings[1], hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions, and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster. Context: 1. https://redis.io/docs/latest/develop/data-types/#strings, https://redis.io/, https://www.youtube.com/watch?v=G1rOthIU-uo, https://www.youtube.com/watch?v=oaJq1mQ3dFI, https://app.daily.dev/tags/redis?ref=roadmapsh"
"What is At this point, you should have everything that you need to build a complete application that: Has a responsive frontend that users can interact with - Has a backend API that is secured with JWT authentication - Has a database that stores data?","At this point you should practice building as much as you can on your own to solidify your knowledge. If you need inspiration, here are some ideas: Build a simple blogging application where users can register, login, setup their blog and write posts. A single page site builder where users can pick a template, modify it and publish it. Hint you will need filesystem to store the design templates. Template files will have placeholders that you will need to replace with user data. Build a simple e-commerce application which will have two types of users i.e. Sellers who can: Register as Seller, Login, Setup their store, Add products, Edit products, Delete products, View Received Orders, Update Order Status (Pending, Shipped, Delivered), Buyers who can register, Login, Browse products by all sellers, Add products to cart, Checkout, View order history, View order status, Cancel order, View seller profile, View seller products Context: "
What is Intro to Linux / Unix?,"Knowledge of UNIX is a must for almost all kind of development as most of the codes that you write is most likely going to be finally deployed on a UNIX/Linux machine. Linux has been the backbone of the free and open source software movement, providing a simple and elegant operating system for almost all your needs. Context: https://www.coursera.org/courses?query=unix, https://dev.to/rudrakshi99/linux-basics-2onj, https://www.tutorialspoint.com/unix/index.htm, https://www.youtube.com/watch?v=ROjZy1WbCIA, https://app.daily.dev/tags/linux?ref=roadmapsh"
What is Intro Basics AWS Services?,"AWS has several services but you don’t need to know all of them. Some common ones that you can start with are EC2, VPN, S3, Route 53, and SES. Context: "
What is Intro to EC2?,"Amazon Elastic Compute Cloud (EC2) is a web service that provides resizable compute capacity in the form of virtual servers, known as instances. With EC2, you can quickly scale your infrastructure up or down as your computing requirements change. This service effectively reduces the time required to obtain and boot new server instances, allowing you to easily adjust capacity according to the needs of your application. Context: https://cs.fyi/guide/up-and-running-with-aws-ec2, https://cloudcasts.io/course/ec2-essentials, https://www.youtube.com/watch?v=oHAQ3TzUTro, https://app.daily.dev/tags/aws-ec2?ref=roadmapsh"
What is Intro to VPC?,"VPC stands for Virtual Private Cloud and is an essential service provided by AWS that allows you to create a private, isolated section within the AWS cloud, where you can define your own virtual network. It offers a more secure and controlled environment, enabling you to easily launch and manage your resources within your personal network. Context: https://cs.fyi/guide/up-and-running-with-aws-vpc, https://cloudcasts.io/course/vpc-basics, https://www.youtube.com/watch?v=TUTqYEZZUdc"
What is Intro to S3?,"S3 is a service that allows you to store files in the cloud. It’s a simple service that you can use to store files and serve them to your users. Context: https://www.youtube.com/watch?v=NZElg91l_ms, https://www.youtube.com/watch?v=RoY3ekCCxKc&list=PL0X6fGhFFNTcU-_MCPe9dkH6sqmgfhy_M, https://app.daily.dev/tags/aws-s3?ref=roadmapsh"
What is Intro to Route53?,"Route53[1] is AWS’s Domain Name System (DNS) service that plays a critical role in connecting user requests to your web application or other resources within your infrastructure. With Route53, you can easily manage domains, redirect traffic, and configure domain-related settings. It has several advantages, including high availability, low latency, and integration with other AWS resources. Context: 1. https://aws.amazon.com/route53/, https://www.youtube.com/watch?v=RGWgfhZByAI, https://www.youtube.com/watch?v=jDz4j_kkyLA, https://www.youtube.com/watch?v=yRIY7BJohfo&t=2s"
What is Intro to SES?,"Amazon SES (Simple Email Service) is a scalable, flexible, and cost-effective cloud-based email service that is specifically designed for developers, marketers, and businesses to send and receive marketing, transactional, and notification emails. SES is useful, especially when you need to send a large volume of emails, as it offers high deliverability, reliability, and ease of use. Context: https://www.youtube.com/watch?v=HiHflLTqiwU"
What is Getting start with deployment?,"Now that you know the basics of AWS, you should be able to deploy your application to AWS. You don’t need to use all the AWS services, here is what you can probably get started with: Setup an EC2 instance using any AMI (e.g. latest version of Ubuntu) - SSH into the EC2 instance using the key pair you created - Install Node.js on the EC2 instance - Install Git on the EC2 instance - Clone your application from GitHub - Install and configure database on the EC2 instance (e.g. PostgreSQL) - Make sure that the security group of the EC2 instance allows HTTP and HTTPS traffic - Try to access your application using the public IP address of the EC2 instance - Purchase or setup a domain name using Route53 (or any other domain name provider) and point it to the public IP address of the EC2 instance - Setup HTTPs using certbot[1] - And voilla! You have deployed your application to AWS! Context: 1. https://roadmap.sh/guides/setup-and-auto-renew-ssl-certificates, https://www.youtube.com/watch?v=oHAQ3TzUTro, https://app.daily.dev/tags/cicd?ref=roadmapsh"
What is Intro to Monit?,"When it comes to monitoring the health of your applications, there are several different options available. My favorite monitoring stack is Prometheus and Grafana, but it can be a bit overwhelming to set up and configure. If you’re looking for a simpler solution, Monit is a great alternative that can be utilized to monitor and manage system resources such as services, processes, files, directories, devices, and network connections, making your application more reliable and resilient to issues like crashes, unresponsiveness, or resource exhaustion. Some of the key features of Monit are: Automatic Recovery: Monit can automatically restart a service or process if it fails, making your application more resistant to unexpected issues. Alert Notifications: Monit can send email notifications when a problem is detected or when a certain condition is met, keeping you informed about the health of your application. Event Logging: All events detected by Monit are stored in a log for easy troubleshooting and analysis. Resource Limit Monitoring: Monit can monitor the resource utilization (CPU, memory, network, etc.) of a process or service and take action if a specific limit is exceeded. Flexible Configuration: Monit uses a simple, human-readable configuration syntax that allows you to tailor its behavior to your needs. Web Interface: Monit provides a built-in web interface for remotely monitoring your application’s status and manage services. Context: https://mmonit.com/monit/#documentation, https://www.youtube.com/watch?v=3cA5lNje1Ow"
"What is You should now implement monitoring and autorestarts for your application using monit. Regarding autorestarts, you can also use pm2[1].?",Monit comes with existing configurations for many services. You can find them in /etc/monit/conf-available. You can copy them (and modify if required) to /etc/monit/conf-enabled to enable them Context: 
What is Intro to GitHub Actions?,"GitHub Actions is a workflow automation tool provided by GitHub that can be used to automate various tasks in the app development process. Context: https://github.com/features/actions, https://docs.github.com/en/actions, https://www.youtube.com/watch?v=eB0nUzAI7M8, https://www.youtube.com/watch?v=scEDHsr3APg, https://app.daily.dev/tags/github?ref=roadmapsh"
What is Intro to C1/CD?,"Now that you have the infrastructure setup, it’s time to automate the deployment process. This is where CI / CD comes in. If you don’t know what CI/CD are, you should watch DevOps CI/CD Explained in 100 Seconds[1]. The next step at this point is to implement CI/CD for your application using GitHub actions. Setup a GitHub action that, whenever you push to master, will automatically: Run your tests (ignore this step if you haven’t learnt it yet) Deploy your application to AWS - Regarding the deployment to AWS you can use rsync to copy the files to the server. Here’s a sample GitHub workflow[2] using rsync. Context: 1. https://www.youtube.com/watch?v=scEDHsr3APg, 2. https://gist.github.com/kamranahmedse/1e94b412006040f38e24b9443b2da41a"
What is Intro to Ansible?,"Ansible is an open-source configuration management, application deployment and provisioning tool that uses its own declarative language in YAML. Ansible is agentless, meaning you only need remote connections via SSH or Windows Remote Management via Powershell in order to function Context: https://www.ansible.com/, https://docs.ansible.com/ansible/latest/getting_started/index.html, https://docs.ansible.com/, https://www.youtube.com/watch?v=9Ua2b06oAr4, https://app.daily.dev/tags/ansible?ref=roadmapsh"
What is Intro to Terraform?,"Terraform is an extremely popular open source Infrastructure as Code (IaC) tool that can be used with many different cloud and service provider APIs. Terraform focuses on an immutable approach to infrastructure, with a terraform state file center to tracking the status of your real world infrastructure. Context: https://www.terraform.io/, https://developer.hashicorp.com/terraform/docs, https://developer.hashicorp.com/terraform/cdktf, https://developer.hashicorp.com/terraform/cdktf/concepts/cdktf-architecture, https://developer.hashicorp.com/terraform/cdktf/examples, https://developer.hashicorp.com/terraform/tutorials, https://developer.hashicorp.com/terraform/tutorials/cdktf/cdktf-install?in=terraform%2Fcdktf, https://thenewstack.io/how-to-scale-your-terraform-infrastructure/, https://www.youtube.com/watch?v=h970ZBgKINg, https://app.daily.dev/tags/terraform?ref=roadmapsh"
